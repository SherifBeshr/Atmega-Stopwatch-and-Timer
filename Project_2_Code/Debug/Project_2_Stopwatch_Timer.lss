
Project_2_Stopwatch_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000292a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000292a  000029be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800068  00800068  000029c6  2**0
                  ALLOC
  3 .stab         00001a1c  00000000  00000000  000029c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008ba  00000000  00000000  000043e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000080d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009058  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000949a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009d28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__vector_1>
       8:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 36       	cpi	r26, 0x6F	; 111
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e2       	ldi	r30, 0x2A	; 42
      78:	f9 e2       	ldi	r31, 0x29	; 41
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 09 14 	call	0x2812	; 0x2812 <main>
      8a:	0c 94 93 14 	jmp	0x2926	; 0x2926 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Timer1_Init>:


/*	FCPU = 1 MHz	*/

void Timer1_Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;				// Bottom = 0
     ca6:	ec e4       	ldi	r30, 0x4C	; 76
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	11 82       	std	Z+1, r1	; 0x01
     cac:	10 82       	st	Z, r1
	OCR1A = 977;			// Clock for 1 second
     cae:	ea e4       	ldi	r30, 0x4A	; 74
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	81 ed       	ldi	r24, 0xD1	; 209
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE1A);	// Set Module flag
     cba:	a9 e5       	ldi	r26, 0x59	; 89
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e9 e5       	ldi	r30, 0x59	; 89
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	80 61       	ori	r24, 0x10	; 16
     cc6:	8c 93       	st	X, r24
	/*
	 * 	CTC Mode , Pre-scalar = 1024 >> Time per clock cycle = 1024/1MHz = 1.024mS
	 *	FOC1A = 1 , WGM12 = 1 , CS12 = 1 , CS10 = 1
	 */
	TCCR1A = (1<<FOC1A);
     cc8:	ef e4       	ldi	r30, 0x4F	; 79
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	88 e0       	ldi	r24, 0x08	; 8
     cce:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);
     cd0:	ee e4       	ldi	r30, 0x4E	; 78
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	8d e0       	ldi	r24, 0x0D	; 13
     cd6:	80 83       	st	Z, r24
}
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <Ext_INT0_Reset>:

void Ext_INT0_Reset(void)
{
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1<<RESET);
     ce6:	a1 e3       	ldi	r26, 0x31	; 49
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e1 e3       	ldi	r30, 0x31	; 49
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8b 7f       	andi	r24, 0xFB	; 251
     cf2:	8c 93       	st	X, r24
	PORTD |= (1<<RESET);
     cf4:	a2 e3       	ldi	r26, 0x32	; 50
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e2 e3       	ldi	r30, 0x32	; 50
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	84 60       	ori	r24, 0x04	; 4
     d00:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC01);
     d02:	a5 e5       	ldi	r26, 0x55	; 85
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e5 e5       	ldi	r30, 0x55	; 85
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	82 60       	ori	r24, 0x02	; 2
     d0e:	8c 93       	st	X, r24
	GICR |= (1<<INT0);
     d10:	ab e5       	ldi	r26, 0x5B	; 91
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	eb e5       	ldi	r30, 0x5B	; 91
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 64       	ori	r24, 0x40	; 64
     d1c:	8c 93       	st	X, r24
}
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <Ext_INT1_Pause>:

void Ext_INT1_Pause(void)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1<<Pause);
     d2c:	a1 e3       	ldi	r26, 0x31	; 49
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e1 e3       	ldi	r30, 0x31	; 49
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	87 7f       	andi	r24, 0xF7	; 247
     d38:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC11) | (1<<ISC10);
     d3a:	a5 e5       	ldi	r26, 0x55	; 85
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e5 e5       	ldi	r30, 0x55	; 85
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	8c 60       	ori	r24, 0x0C	; 12
     d46:	8c 93       	st	X, r24
	GICR |= (1<<INT1);
     d48:	ab e5       	ldi	r26, 0x5B	; 91
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	eb e5       	ldi	r30, 0x5B	; 91
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 68       	ori	r24, 0x80	; 128
     d54:	8c 93       	st	X, r24
}
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <Ext_INT2_Resume>:

void Ext_INT2_Resume()
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
	DDRB &= ~(1<<RESUME);
     d64:	a7 e3       	ldi	r26, 0x37	; 55
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e3       	ldi	r30, 0x37	; 55
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8b 7f       	andi	r24, 0xFB	; 251
     d70:	8c 93       	st	X, r24
	PORTB |= (1<<RESUME);
     d72:	a8 e3       	ldi	r26, 0x38	; 56
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e8 e3       	ldi	r30, 0x38	; 56
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	84 60       	ori	r24, 0x04	; 4
     d7e:	8c 93       	st	X, r24
	MCUCSR &= ~(1<<ISC2);
     d80:	a4 e5       	ldi	r26, 0x54	; 84
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e4 e5       	ldi	r30, 0x54	; 84
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8f 7b       	andi	r24, 0xBF	; 191
     d8c:	8c 93       	st	X, r24
	GICR |= (1<<INT2);
     d8e:	ab e5       	ldi	r26, 0x5B	; 91
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	eb e5       	ldi	r30, 0x5B	; 91
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	80 62       	ori	r24, 0x20	; 32
     d9a:	8c 93       	st	X, r24
}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <__vector_6>:

ISR (TIMER1_COMPA_vect)
{
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	8f 93       	push	r24
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
	if (!(PIND & (1<<Mode_Selector)))
     dba:	e0 e3       	ldi	r30, 0x30	; 48
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	88 23       	and	r24, r24
     dc2:	34 f0       	brlt	.+12     	; 0xdd0 <__vector_6+0x2e>
	{
		++sec_units;					// Interrupt Every Second
     dc4:	80 91 68 00 	lds	r24, 0x0068
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	80 93 68 00 	sts	0x0068, r24
     dce:	05 c0       	rjmp	.+10     	; 0xdda <__vector_6+0x38>
	}
	else
	{
		--sec_units;
     dd0:	80 91 68 00 	lds	r24, 0x0068
     dd4:	81 50       	subi	r24, 0x01	; 1
     dd6:	80 93 68 00 	sts	0x0068, r24
	}
}
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	ff 91       	pop	r31
     de0:	ef 91       	pop	r30
     de2:	8f 91       	pop	r24
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	0f 90       	pop	r0
     dea:	1f 90       	pop	r1
     dec:	18 95       	reti

00000dee <__vector_1>:

ISR (INT0_vect)
{
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	8f 93       	push	r24
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
	sec_units = sec_tenth = min_units = min_tenth = hrs_units = hrs_tenth = 0;
     e02:	10 92 6d 00 	sts	0x006D, r1
     e06:	80 91 6d 00 	lds	r24, 0x006D
     e0a:	80 93 6c 00 	sts	0x006C, r24
     e0e:	80 91 6c 00 	lds	r24, 0x006C
     e12:	80 93 6b 00 	sts	0x006B, r24
     e16:	80 91 6b 00 	lds	r24, 0x006B
     e1a:	80 93 6a 00 	sts	0x006A, r24
     e1e:	80 91 6a 00 	lds	r24, 0x006A
     e22:	80 93 69 00 	sts	0x0069, r24
     e26:	80 91 69 00 	lds	r24, 0x0069
     e2a:	80 93 68 00 	sts	0x0068, r24
}
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	8f 91       	pop	r24
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_2>:

ISR (INT1_vect)
{
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0;
     e54:	ee e4       	ldi	r30, 0x4E	; 78
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_18>:

ISR (INT2_vect)
{
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	8f 93       	push	r24
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);
     e84:	ee e4       	ldi	r30, 0x4E	; 78
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	8d e0       	ldi	r24, 0x0D	; 13
     e8a:	80 83       	st	Z, r24
}
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	8f 91       	pop	r24
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <Mode_Selection_Trial>:
/*************************************** Timer Mode Time Selector ***************************************/

char selector = 0;

void Mode_Selection_Trial()
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
	if (selector == 1)
     ea8:	80 91 6e 00 	lds	r24, 0x006E
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	19 f4       	brne	.+6      	; 0xeb6 <Mode_Selection_Trial+0x16>
		Seconds_Selector();
     eb0:	0e 94 6b 07 	call	0xed6	; 0xed6 <Seconds_Selector>
     eb4:	0d c0       	rjmp	.+26     	; 0xed0 <Mode_Selection_Trial+0x30>
	else if (selector == 2)
     eb6:	80 91 6e 00 	lds	r24, 0x006E
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	19 f4       	brne	.+6      	; 0xec4 <Mode_Selection_Trial+0x24>
		Minutes_Selector();
     ebe:	0e 94 81 09 	call	0x1302	; 0x1302 <Minutes_Selector>
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <Mode_Selection_Trial+0x30>
	else if (selector == 3)
     ec4:	80 91 6e 00 	lds	r24, 0x006E
     ec8:	83 30       	cpi	r24, 0x03	; 3
     eca:	11 f4       	brne	.+4      	; 0xed0 <Mode_Selection_Trial+0x30>
		Hours_Selector();
     ecc:	0e 94 97 0b 	call	0x172e	; 0x172e <Hours_Selector>
	else
		return;
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <Seconds_Selector>:

void Seconds_Selector()
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	aa 97       	sbiw	r28, 0x2a	; 42
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <Seconds_Selector+0x1a>
	while (PINB & (1<<Time_Selector)) {display();}
     eec:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
     ef0:	e6 e3       	ldi	r30, 0x36	; 54
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	80 72       	andi	r24, 0x20	; 32
     efc:	90 70       	andi	r25, 0x00	; 0
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	a9 f7       	brne	.-22     	; 0xeec <Seconds_Selector+0x16>
	PORTB &= ~(1<<Seconds_LED);
     f02:	a8 e3       	ldi	r26, 0x38	; 56
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e8 e3       	ldi	r30, 0x38	; 56
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	8e 7f       	andi	r24, 0xFE	; 254
     f0e:	8c 93       	st	X, r24
     f10:	ea c1       	rjmp	.+980    	; 0x12e6 <Seconds_Selector+0x410>
	while (selector == 1)
	{
		PORTB |= (1<<Seconds_LED);
     f12:	a8 e3       	ldi	r26, 0x38	; 56
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e8 e3       	ldi	r30, 0x38	; 56
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	81 60       	ori	r24, 0x01	; 1
     f1e:	8c 93       	st	X, r24
		display();
     f20:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
		if (PINB & (1<<Time_Selector))
     f24:	e6 e3       	ldi	r30, 0x36	; 54
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	80 72       	andi	r24, 0x20	; 32
     f30:	90 70       	andi	r25, 0x00	; 0
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	09 f4       	brne	.+2      	; 0xf38 <Seconds_Selector+0x62>
     f36:	86 c0       	rjmp	.+268    	; 0x1044 <Seconds_Selector+0x16e>
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	a8 e4       	ldi	r26, 0x48	; 72
     f3e:	b2 e4       	ldi	r27, 0x42	; 66
     f40:	8f a3       	std	Y+39, r24	; 0x27
     f42:	98 a7       	std	Y+40, r25	; 0x28
     f44:	a9 a7       	std	Y+41, r26	; 0x29
     f46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f48:	6f a1       	ldd	r22, Y+39	; 0x27
     f4a:	78 a5       	ldd	r23, Y+40	; 0x28
     f4c:	89 a5       	ldd	r24, Y+41	; 0x29
     f4e:	9a a5       	ldd	r25, Y+42	; 0x2a
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	4a e7       	ldi	r20, 0x7A	; 122
     f56:	53 e4       	ldi	r21, 0x43	; 67
     f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	8b a3       	std	Y+35, r24	; 0x23
     f62:	9c a3       	std	Y+36, r25	; 0x24
     f64:	ad a3       	std	Y+37, r26	; 0x25
     f66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f68:	6b a1       	ldd	r22, Y+35	; 0x23
     f6a:	7c a1       	ldd	r23, Y+36	; 0x24
     f6c:	8d a1       	ldd	r24, Y+37	; 0x25
     f6e:	9e a1       	ldd	r25, Y+38	; 0x26
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e8       	ldi	r20, 0x80	; 128
     f76:	5f e3       	ldi	r21, 0x3F	; 63
     f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f7c:	88 23       	and	r24, r24
     f7e:	2c f4       	brge	.+10     	; 0xf8a <Seconds_Selector+0xb4>
		__ticks = 1;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9a a3       	std	Y+34, r25	; 0x22
     f86:	89 a3       	std	Y+33, r24	; 0x21
     f88:	3f c0       	rjmp	.+126    	; 0x1008 <Seconds_Selector+0x132>
	else if (__tmp > 65535)
     f8a:	6b a1       	ldd	r22, Y+35	; 0x23
     f8c:	7c a1       	ldd	r23, Y+36	; 0x24
     f8e:	8d a1       	ldd	r24, Y+37	; 0x25
     f90:	9e a1       	ldd	r25, Y+38	; 0x26
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	3f ef       	ldi	r19, 0xFF	; 255
     f96:	4f e7       	ldi	r20, 0x7F	; 127
     f98:	57 e4       	ldi	r21, 0x47	; 71
     f9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f9e:	18 16       	cp	r1, r24
     fa0:	4c f5       	brge	.+82     	; 0xff4 <Seconds_Selector+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa2:	6f a1       	ldd	r22, Y+39	; 0x27
     fa4:	78 a5       	ldd	r23, Y+40	; 0x28
     fa6:	89 a5       	ldd	r24, Y+41	; 0x29
     fa8:	9a a5       	ldd	r25, Y+42	; 0x2a
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e2       	ldi	r20, 0x20	; 32
     fb0:	51 e4       	ldi	r21, 0x41	; 65
     fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	9a a3       	std	Y+34, r25	; 0x22
     fc8:	89 a3       	std	Y+33, r24	; 0x21
     fca:	0f c0       	rjmp	.+30     	; 0xfea <Seconds_Selector+0x114>
     fcc:	89 e1       	ldi	r24, 0x19	; 25
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	98 a3       	std	Y+32, r25	; 0x20
     fd2:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fd6:	98 a1       	ldd	r25, Y+32	; 0x20
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <Seconds_Selector+0x102>
     fdc:	98 a3       	std	Y+32, r25	; 0x20
     fde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe0:	89 a1       	ldd	r24, Y+33	; 0x21
     fe2:	9a a1       	ldd	r25, Y+34	; 0x22
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	9a a3       	std	Y+34, r25	; 0x22
     fe8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fea:	89 a1       	ldd	r24, Y+33	; 0x21
     fec:	9a a1       	ldd	r25, Y+34	; 0x22
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	69 f7       	brne	.-38     	; 0xfcc <Seconds_Selector+0xf6>
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <Seconds_Selector+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff4:	6b a1       	ldd	r22, Y+35	; 0x23
     ff6:	7c a1       	ldd	r23, Y+36	; 0x24
     ff8:	8d a1       	ldd	r24, Y+37	; 0x25
     ffa:	9e a1       	ldd	r25, Y+38	; 0x26
     ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	9a a3       	std	Y+34, r25	; 0x22
    1006:	89 a3       	std	Y+33, r24	; 0x21
    1008:	89 a1       	ldd	r24, Y+33	; 0x21
    100a:	9a a1       	ldd	r25, Y+34	; 0x22
    100c:	9e 8f       	std	Y+30, r25	; 0x1e
    100e:	8d 8f       	std	Y+29, r24	; 0x1d
    1010:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1012:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <Seconds_Selector+0x13e>
    1018:	9e 8f       	std	Y+30, r25	; 0x1e
    101a:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(50);
			if (PINB & (1<<Time_Selector))
    101c:	e6 e3       	ldi	r30, 0x36	; 54
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	80 72       	andi	r24, 0x20	; 32
    1028:	90 70       	andi	r25, 0x00	; 0
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	59 f0       	breq	.+22     	; 0x1044 <Seconds_Selector+0x16e>
			{
				PORTB &= ~(1<<Seconds_LED);
    102e:	a8 e3       	ldi	r26, 0x38	; 56
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e8 e3       	ldi	r30, 0x38	; 56
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	8e 7f       	andi	r24, 0xFE	; 254
    103a:	8c 93       	st	X, r24
				selector = 1;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	80 93 6e 00 	sts	0x006E, r24
    1042:	56 c1       	rjmp	.+684    	; 0x12f0 <Seconds_Selector+0x41a>
				return;
			}
		}
		if (PINB & (1<<Timer_Inc))
    1044:	e6 e3       	ldi	r30, 0x36	; 54
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	80 74       	andi	r24, 0x40	; 64
    1050:	90 70       	andi	r25, 0x00	; 0
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	09 f4       	brne	.+2      	; 0x1058 <Seconds_Selector+0x182>
    1056:	a2 c0       	rjmp	.+324    	; 0x119c <Seconds_Selector+0x2c6>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a0 ef       	ldi	r26, 0xF0	; 240
    105e:	b1 e4       	ldi	r27, 0x41	; 65
    1060:	89 8f       	std	Y+25, r24	; 0x19
    1062:	9a 8f       	std	Y+26, r25	; 0x1a
    1064:	ab 8f       	std	Y+27, r26	; 0x1b
    1066:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1068:	69 8d       	ldd	r22, Y+25	; 0x19
    106a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    106c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    106e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	4a e7       	ldi	r20, 0x7A	; 122
    1076:	53 e4       	ldi	r21, 0x43	; 67
    1078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	8d 8b       	std	Y+21, r24	; 0x15
    1082:	9e 8b       	std	Y+22, r25	; 0x16
    1084:	af 8b       	std	Y+23, r26	; 0x17
    1086:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1088:	6d 89       	ldd	r22, Y+21	; 0x15
    108a:	7e 89       	ldd	r23, Y+22	; 0x16
    108c:	8f 89       	ldd	r24, Y+23	; 0x17
    108e:	98 8d       	ldd	r25, Y+24	; 0x18
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	5f e3       	ldi	r21, 0x3F	; 63
    1098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    109c:	88 23       	and	r24, r24
    109e:	2c f4       	brge	.+10     	; 0x10aa <Seconds_Selector+0x1d4>
		__ticks = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9c 8b       	std	Y+20, r25	; 0x14
    10a6:	8b 8b       	std	Y+19, r24	; 0x13
    10a8:	3f c0       	rjmp	.+126    	; 0x1128 <Seconds_Selector+0x252>
	else if (__tmp > 65535)
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	4f e7       	ldi	r20, 0x7F	; 127
    10b8:	57 e4       	ldi	r21, 0x47	; 71
    10ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10be:	18 16       	cp	r1, r24
    10c0:	4c f5       	brge	.+82     	; 0x1114 <Seconds_Selector+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	69 8d       	ldd	r22, Y+25	; 0x19
    10c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e2       	ldi	r20, 0x20	; 32
    10d0:	51 e4       	ldi	r21, 0x41	; 65
    10d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	9c 8b       	std	Y+20, r25	; 0x14
    10e8:	8b 8b       	std	Y+19, r24	; 0x13
    10ea:	0f c0       	rjmp	.+30     	; 0x110a <Seconds_Selector+0x234>
    10ec:	89 e1       	ldi	r24, 0x19	; 25
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9a 8b       	std	Y+18, r25	; 0x12
    10f2:	89 8b       	std	Y+17, r24	; 0x11
    10f4:	89 89       	ldd	r24, Y+17	; 0x11
    10f6:	9a 89       	ldd	r25, Y+18	; 0x12
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <Seconds_Selector+0x222>
    10fc:	9a 8b       	std	Y+18, r25	; 0x12
    10fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	9c 89       	ldd	r25, Y+20	; 0x14
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	9c 8b       	std	Y+20, r25	; 0x14
    1108:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	8b 89       	ldd	r24, Y+19	; 0x13
    110c:	9c 89       	ldd	r25, Y+20	; 0x14
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	69 f7       	brne	.-38     	; 0x10ec <Seconds_Selector+0x216>
    1112:	14 c0       	rjmp	.+40     	; 0x113c <Seconds_Selector+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1114:	6d 89       	ldd	r22, Y+21	; 0x15
    1116:	7e 89       	ldd	r23, Y+22	; 0x16
    1118:	8f 89       	ldd	r24, Y+23	; 0x17
    111a:	98 8d       	ldd	r25, Y+24	; 0x18
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9c 8b       	std	Y+20, r25	; 0x14
    1126:	8b 8b       	std	Y+19, r24	; 0x13
    1128:	8b 89       	ldd	r24, Y+19	; 0x13
    112a:	9c 89       	ldd	r25, Y+20	; 0x14
    112c:	98 8b       	std	Y+16, r25	; 0x10
    112e:	8f 87       	std	Y+15, r24	; 0x0f
    1130:	8f 85       	ldd	r24, Y+15	; 0x0f
    1132:	98 89       	ldd	r25, Y+16	; 0x10
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <Seconds_Selector+0x25e>
    1138:	98 8b       	std	Y+16, r25	; 0x10
    113a:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(30);
			if (PINB & (1<<Timer_Inc))
    113c:	e6 e3       	ldi	r30, 0x36	; 54
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	80 74       	andi	r24, 0x40	; 64
    1148:	90 70       	andi	r25, 0x00	; 0
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	e9 f0       	breq	.+58     	; 0x1188 <Seconds_Selector+0x2b2>
			{
				++sec_units;
    114e:	80 91 68 00 	lds	r24, 0x0068
    1152:	8f 5f       	subi	r24, 0xFF	; 255
    1154:	80 93 68 00 	sts	0x0068, r24
				if (sec_units == 10)
    1158:	80 91 68 00 	lds	r24, 0x0068
    115c:	8a 30       	cpi	r24, 0x0A	; 10
    115e:	39 f4       	brne	.+14     	; 0x116e <Seconds_Selector+0x298>
				{
					++sec_tenth;
    1160:	80 91 69 00 	lds	r24, 0x0069
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	80 93 69 00 	sts	0x0069, r24
					sec_units = 0;
    116a:	10 92 68 00 	sts	0x0068, r1
				}
				if (sec_tenth == 6)
    116e:	80 91 69 00 	lds	r24, 0x0069
    1172:	86 30       	cpi	r24, 0x06	; 6
    1174:	49 f4       	brne	.+18     	; 0x1188 <Seconds_Selector+0x2b2>
				{
					sec_tenth = sec_units = 0;
    1176:	10 92 68 00 	sts	0x0068, r1
    117a:	80 91 68 00 	lds	r24, 0x0068
    117e:	80 93 69 00 	sts	0x0069, r24
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <Seconds_Selector+0x2b2>
				}
			}
			while ((PINB & (1<<Timer_Inc))) {display();}
    1184:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
    1188:	e6 e3       	ldi	r30, 0x36	; 54
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	80 74       	andi	r24, 0x40	; 64
    1194:	90 70       	andi	r25, 0x00	; 0
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	a9 f7       	brne	.-22     	; 0x1184 <Seconds_Selector+0x2ae>
    119a:	a5 c0       	rjmp	.+330    	; 0x12e6 <Seconds_Selector+0x410>
		}
		else if (PINB & (1<<Timer_Dec))
    119c:	e6 e3       	ldi	r30, 0x36	; 54
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	88 23       	and	r24, r24
    11a4:	0c f0       	brlt	.+2      	; 0x11a8 <Seconds_Selector+0x2d2>
    11a6:	9f c0       	rjmp	.+318    	; 0x12e6 <Seconds_Selector+0x410>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a0 ef       	ldi	r26, 0xF0	; 240
    11ae:	b1 e4       	ldi	r27, 0x41	; 65
    11b0:	8b 87       	std	Y+11, r24	; 0x0b
    11b2:	9c 87       	std	Y+12, r25	; 0x0c
    11b4:	ad 87       	std	Y+13, r26	; 0x0d
    11b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    11bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11be:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	4a e7       	ldi	r20, 0x7A	; 122
    11c6:	53 e4       	ldi	r21, 0x43	; 67
    11c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	8f 83       	std	Y+7, r24	; 0x07
    11d2:	98 87       	std	Y+8, r25	; 0x08
    11d4:	a9 87       	std	Y+9, r26	; 0x09
    11d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	5f e3       	ldi	r21, 0x3F	; 63
    11e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11ec:	88 23       	and	r24, r24
    11ee:	2c f4       	brge	.+10     	; 0x11fa <Seconds_Selector+0x324>
		__ticks = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
    11f8:	3f c0       	rjmp	.+126    	; 0x1278 <Seconds_Selector+0x3a2>
	else if (__tmp > 65535)
    11fa:	6f 81       	ldd	r22, Y+7	; 0x07
    11fc:	78 85       	ldd	r23, Y+8	; 0x08
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	3f ef       	ldi	r19, 0xFF	; 255
    1206:	4f e7       	ldi	r20, 0x7F	; 127
    1208:	57 e4       	ldi	r21, 0x47	; 71
    120a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    120e:	18 16       	cp	r1, r24
    1210:	4c f5       	brge	.+82     	; 0x1264 <Seconds_Selector+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1212:	6b 85       	ldd	r22, Y+11	; 0x0b
    1214:	7c 85       	ldd	r23, Y+12	; 0x0c
    1216:	8d 85       	ldd	r24, Y+13	; 0x0d
    1218:	9e 85       	ldd	r25, Y+14	; 0x0e
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	51 e4       	ldi	r21, 0x41	; 65
    1222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9e 83       	std	Y+6, r25	; 0x06
    1238:	8d 83       	std	Y+5, r24	; 0x05
    123a:	0f c0       	rjmp	.+30     	; 0x125a <Seconds_Selector+0x384>
    123c:	89 e1       	ldi	r24, 0x19	; 25
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <Seconds_Selector+0x372>
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	9e 81       	ldd	r25, Y+6	; 0x06
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	9e 83       	std	Y+6, r25	; 0x06
    1258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	69 f7       	brne	.-38     	; 0x123c <Seconds_Selector+0x366>
    1262:	14 c0       	rjmp	.+40     	; 0x128c <Seconds_Selector+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1264:	6f 81       	ldd	r22, Y+7	; 0x07
    1266:	78 85       	ldd	r23, Y+8	; 0x08
    1268:	89 85       	ldd	r24, Y+9	; 0x09
    126a:	9a 85       	ldd	r25, Y+10	; 0x0a
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	9e 83       	std	Y+6, r25	; 0x06
    1276:	8d 83       	std	Y+5, r24	; 0x05
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <Seconds_Selector+0x3ae>
    1288:	9a 83       	std	Y+2, r25	; 0x02
    128a:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(30);
			if (PINB & (1<<Timer_Dec))
    128c:	e6 e3       	ldi	r30, 0x36	; 54
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	88 23       	and	r24, r24
    1294:	1c f5       	brge	.+70     	; 0x12dc <Seconds_Selector+0x406>
			{
				--sec_units;
    1296:	80 91 68 00 	lds	r24, 0x0068
    129a:	81 50       	subi	r24, 0x01	; 1
    129c:	80 93 68 00 	sts	0x0068, r24
				if (sec_units == 255)
    12a0:	80 91 68 00 	lds	r24, 0x0068
    12a4:	8f 3f       	cpi	r24, 0xFF	; 255
    12a6:	49 f4       	brne	.+18     	; 0x12ba <Seconds_Selector+0x3e4>
				{
					--sec_tenth;
    12a8:	80 91 69 00 	lds	r24, 0x0069
    12ac:	81 50       	subi	r24, 0x01	; 1
    12ae:	80 93 69 00 	sts	0x0069, r24
					sec_units = 9;
    12b2:	89 e0       	ldi	r24, 0x09	; 9
    12b4:	80 93 68 00 	sts	0x0068, r24
    12b8:	11 c0       	rjmp	.+34     	; 0x12dc <Seconds_Selector+0x406>
				}
				else if (sec_tenth == 0 && sec_units == 0)
    12ba:	80 91 69 00 	lds	r24, 0x0069
    12be:	88 23       	and	r24, r24
    12c0:	69 f4       	brne	.+26     	; 0x12dc <Seconds_Selector+0x406>
    12c2:	80 91 68 00 	lds	r24, 0x0068
    12c6:	88 23       	and	r24, r24
    12c8:	49 f4       	brne	.+18     	; 0x12dc <Seconds_Selector+0x406>
				{
					sec_units = 9; sec_tenth = 5;
    12ca:	89 e0       	ldi	r24, 0x09	; 9
    12cc:	80 93 68 00 	sts	0x0068, r24
    12d0:	85 e0       	ldi	r24, 0x05	; 5
    12d2:	80 93 69 00 	sts	0x0069, r24
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <Seconds_Selector+0x406>
				}
			}
			while ((PINB & (1<<Timer_Dec))) {display();}
    12d8:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
    12dc:	e6 e3       	ldi	r30, 0x36	; 54
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	88 23       	and	r24, r24
    12e4:	cc f3       	brlt	.-14     	; 0x12d8 <Seconds_Selector+0x402>

void Seconds_Selector()
{
	while (PINB & (1<<Time_Selector)) {display();}
	PORTB &= ~(1<<Seconds_LED);
	while (selector == 1)
    12e6:	80 91 6e 00 	lds	r24, 0x006E
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <Seconds_Selector+0x41a>
    12ee:	11 ce       	rjmp	.-990    	; 0xf12 <Seconds_Selector+0x3c>
				}
			}
			while ((PINB & (1<<Timer_Dec))) {display();}
		}
	}
}
    12f0:	aa 96       	adiw	r28, 0x2a	; 42
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <Minutes_Selector>:

void Minutes_Selector()
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	aa 97       	sbiw	r28, 0x2a	; 42
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	02 c0       	rjmp	.+4      	; 0x131c <Minutes_Selector+0x1a>
	while (PINB & (1<<Time_Selector)) {display();}
    1318:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
    131c:	e6 e3       	ldi	r30, 0x36	; 54
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	80 72       	andi	r24, 0x20	; 32
    1328:	90 70       	andi	r25, 0x00	; 0
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	a9 f7       	brne	.-22     	; 0x1318 <Minutes_Selector+0x16>
	PORTB &= ~(1<<Minutes_LED);
    132e:	a8 e3       	ldi	r26, 0x38	; 56
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e8 e3       	ldi	r30, 0x38	; 56
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	8d 7f       	andi	r24, 0xFD	; 253
    133a:	8c 93       	st	X, r24
    133c:	ea c1       	rjmp	.+980    	; 0x1712 <Minutes_Selector+0x410>
	while (selector == 2)
	{
		PORTB |= (1<<Minutes_LED);
    133e:	a8 e3       	ldi	r26, 0x38	; 56
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e8 e3       	ldi	r30, 0x38	; 56
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	82 60       	ori	r24, 0x02	; 2
    134a:	8c 93       	st	X, r24
		display();
    134c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
		if (PINB & (1<<Time_Selector))
    1350:	e6 e3       	ldi	r30, 0x36	; 54
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	80 72       	andi	r24, 0x20	; 32
    135c:	90 70       	andi	r25, 0x00	; 0
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	09 f4       	brne	.+2      	; 0x1364 <Minutes_Selector+0x62>
    1362:	86 c0       	rjmp	.+268    	; 0x1470 <Minutes_Selector+0x16e>
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	a8 e4       	ldi	r26, 0x48	; 72
    136a:	b2 e4       	ldi	r27, 0x42	; 66
    136c:	8f a3       	std	Y+39, r24	; 0x27
    136e:	98 a7       	std	Y+40, r25	; 0x28
    1370:	a9 a7       	std	Y+41, r26	; 0x29
    1372:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1374:	6f a1       	ldd	r22, Y+39	; 0x27
    1376:	78 a5       	ldd	r23, Y+40	; 0x28
    1378:	89 a5       	ldd	r24, Y+41	; 0x29
    137a:	9a a5       	ldd	r25, Y+42	; 0x2a
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	4a e7       	ldi	r20, 0x7A	; 122
    1382:	53 e4       	ldi	r21, 0x43	; 67
    1384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	8b a3       	std	Y+35, r24	; 0x23
    138e:	9c a3       	std	Y+36, r25	; 0x24
    1390:	ad a3       	std	Y+37, r26	; 0x25
    1392:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1394:	6b a1       	ldd	r22, Y+35	; 0x23
    1396:	7c a1       	ldd	r23, Y+36	; 0x24
    1398:	8d a1       	ldd	r24, Y+37	; 0x25
    139a:	9e a1       	ldd	r25, Y+38	; 0x26
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e8       	ldi	r20, 0x80	; 128
    13a2:	5f e3       	ldi	r21, 0x3F	; 63
    13a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13a8:	88 23       	and	r24, r24
    13aa:	2c f4       	brge	.+10     	; 0x13b6 <Minutes_Selector+0xb4>
		__ticks = 1;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	9a a3       	std	Y+34, r25	; 0x22
    13b2:	89 a3       	std	Y+33, r24	; 0x21
    13b4:	3f c0       	rjmp	.+126    	; 0x1434 <Minutes_Selector+0x132>
	else if (__tmp > 65535)
    13b6:	6b a1       	ldd	r22, Y+35	; 0x23
    13b8:	7c a1       	ldd	r23, Y+36	; 0x24
    13ba:	8d a1       	ldd	r24, Y+37	; 0x25
    13bc:	9e a1       	ldd	r25, Y+38	; 0x26
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	3f ef       	ldi	r19, 0xFF	; 255
    13c2:	4f e7       	ldi	r20, 0x7F	; 127
    13c4:	57 e4       	ldi	r21, 0x47	; 71
    13c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13ca:	18 16       	cp	r1, r24
    13cc:	4c f5       	brge	.+82     	; 0x1420 <Minutes_Selector+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ce:	6f a1       	ldd	r22, Y+39	; 0x27
    13d0:	78 a5       	ldd	r23, Y+40	; 0x28
    13d2:	89 a5       	ldd	r24, Y+41	; 0x29
    13d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e2       	ldi	r20, 0x20	; 32
    13dc:	51 e4       	ldi	r21, 0x41	; 65
    13de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	bc 01       	movw	r22, r24
    13e8:	cd 01       	movw	r24, r26
    13ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	9a a3       	std	Y+34, r25	; 0x22
    13f4:	89 a3       	std	Y+33, r24	; 0x21
    13f6:	0f c0       	rjmp	.+30     	; 0x1416 <Minutes_Selector+0x114>
    13f8:	89 e1       	ldi	r24, 0x19	; 25
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	98 a3       	std	Y+32, r25	; 0x20
    13fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1400:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1402:	98 a1       	ldd	r25, Y+32	; 0x20
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <Minutes_Selector+0x102>
    1408:	98 a3       	std	Y+32, r25	; 0x20
    140a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140c:	89 a1       	ldd	r24, Y+33	; 0x21
    140e:	9a a1       	ldd	r25, Y+34	; 0x22
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	9a a3       	std	Y+34, r25	; 0x22
    1414:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1416:	89 a1       	ldd	r24, Y+33	; 0x21
    1418:	9a a1       	ldd	r25, Y+34	; 0x22
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	69 f7       	brne	.-38     	; 0x13f8 <Minutes_Selector+0xf6>
    141e:	14 c0       	rjmp	.+40     	; 0x1448 <Minutes_Selector+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1420:	6b a1       	ldd	r22, Y+35	; 0x23
    1422:	7c a1       	ldd	r23, Y+36	; 0x24
    1424:	8d a1       	ldd	r24, Y+37	; 0x25
    1426:	9e a1       	ldd	r25, Y+38	; 0x26
    1428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	9a a3       	std	Y+34, r25	; 0x22
    1432:	89 a3       	std	Y+33, r24	; 0x21
    1434:	89 a1       	ldd	r24, Y+33	; 0x21
    1436:	9a a1       	ldd	r25, Y+34	; 0x22
    1438:	9e 8f       	std	Y+30, r25	; 0x1e
    143a:	8d 8f       	std	Y+29, r24	; 0x1d
    143c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    143e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <Minutes_Selector+0x13e>
    1444:	9e 8f       	std	Y+30, r25	; 0x1e
    1446:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(50);
			if (PINB & (1<<Time_Selector))
    1448:	e6 e3       	ldi	r30, 0x36	; 54
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	80 72       	andi	r24, 0x20	; 32
    1454:	90 70       	andi	r25, 0x00	; 0
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	59 f0       	breq	.+22     	; 0x1470 <Minutes_Selector+0x16e>
			{
				PORTB &= ~(1<<Minutes_LED);
    145a:	a8 e3       	ldi	r26, 0x38	; 56
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e8 e3       	ldi	r30, 0x38	; 56
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8d 7f       	andi	r24, 0xFD	; 253
    1466:	8c 93       	st	X, r24
				selector = 2;
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	80 93 6e 00 	sts	0x006E, r24
    146e:	56 c1       	rjmp	.+684    	; 0x171c <Minutes_Selector+0x41a>
				return;
			}
		}
		if (PINB & (1<<Timer_Inc))
    1470:	e6 e3       	ldi	r30, 0x36	; 54
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	80 74       	andi	r24, 0x40	; 64
    147c:	90 70       	andi	r25, 0x00	; 0
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	09 f4       	brne	.+2      	; 0x1484 <Minutes_Selector+0x182>
    1482:	a2 c0       	rjmp	.+324    	; 0x15c8 <Minutes_Selector+0x2c6>
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a0 ef       	ldi	r26, 0xF0	; 240
    148a:	b1 e4       	ldi	r27, 0x41	; 65
    148c:	89 8f       	std	Y+25, r24	; 0x19
    148e:	9a 8f       	std	Y+26, r25	; 0x1a
    1490:	ab 8f       	std	Y+27, r26	; 0x1b
    1492:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1494:	69 8d       	ldd	r22, Y+25	; 0x19
    1496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    149a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	4a e7       	ldi	r20, 0x7A	; 122
    14a2:	53 e4       	ldi	r21, 0x43	; 67
    14a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	8d 8b       	std	Y+21, r24	; 0x15
    14ae:	9e 8b       	std	Y+22, r25	; 0x16
    14b0:	af 8b       	std	Y+23, r26	; 0x17
    14b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14b4:	6d 89       	ldd	r22, Y+21	; 0x15
    14b6:	7e 89       	ldd	r23, Y+22	; 0x16
    14b8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ba:	98 8d       	ldd	r25, Y+24	; 0x18
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e8       	ldi	r20, 0x80	; 128
    14c2:	5f e3       	ldi	r21, 0x3F	; 63
    14c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14c8:	88 23       	and	r24, r24
    14ca:	2c f4       	brge	.+10     	; 0x14d6 <Minutes_Selector+0x1d4>
		__ticks = 1;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9c 8b       	std	Y+20, r25	; 0x14
    14d2:	8b 8b       	std	Y+19, r24	; 0x13
    14d4:	3f c0       	rjmp	.+126    	; 0x1554 <Minutes_Selector+0x252>
	else if (__tmp > 65535)
    14d6:	6d 89       	ldd	r22, Y+21	; 0x15
    14d8:	7e 89       	ldd	r23, Y+22	; 0x16
    14da:	8f 89       	ldd	r24, Y+23	; 0x17
    14dc:	98 8d       	ldd	r25, Y+24	; 0x18
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	3f ef       	ldi	r19, 0xFF	; 255
    14e2:	4f e7       	ldi	r20, 0x7F	; 127
    14e4:	57 e4       	ldi	r21, 0x47	; 71
    14e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14ea:	18 16       	cp	r1, r24
    14ec:	4c f5       	brge	.+82     	; 0x1540 <Minutes_Selector+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ee:	69 8d       	ldd	r22, Y+25	; 0x19
    14f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e2       	ldi	r20, 0x20	; 32
    14fc:	51 e4       	ldi	r21, 0x41	; 65
    14fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	bc 01       	movw	r22, r24
    1508:	cd 01       	movw	r24, r26
    150a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	9c 8b       	std	Y+20, r25	; 0x14
    1514:	8b 8b       	std	Y+19, r24	; 0x13
    1516:	0f c0       	rjmp	.+30     	; 0x1536 <Minutes_Selector+0x234>
    1518:	89 e1       	ldi	r24, 0x19	; 25
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9a 8b       	std	Y+18, r25	; 0x12
    151e:	89 8b       	std	Y+17, r24	; 0x11
    1520:	89 89       	ldd	r24, Y+17	; 0x11
    1522:	9a 89       	ldd	r25, Y+18	; 0x12
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <Minutes_Selector+0x222>
    1528:	9a 8b       	std	Y+18, r25	; 0x12
    152a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152c:	8b 89       	ldd	r24, Y+19	; 0x13
    152e:	9c 89       	ldd	r25, Y+20	; 0x14
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	9c 8b       	std	Y+20, r25	; 0x14
    1534:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1536:	8b 89       	ldd	r24, Y+19	; 0x13
    1538:	9c 89       	ldd	r25, Y+20	; 0x14
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	69 f7       	brne	.-38     	; 0x1518 <Minutes_Selector+0x216>
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <Minutes_Selector+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1540:	6d 89       	ldd	r22, Y+21	; 0x15
    1542:	7e 89       	ldd	r23, Y+22	; 0x16
    1544:	8f 89       	ldd	r24, Y+23	; 0x17
    1546:	98 8d       	ldd	r25, Y+24	; 0x18
    1548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	9c 8b       	std	Y+20, r25	; 0x14
    1552:	8b 8b       	std	Y+19, r24	; 0x13
    1554:	8b 89       	ldd	r24, Y+19	; 0x13
    1556:	9c 89       	ldd	r25, Y+20	; 0x14
    1558:	98 8b       	std	Y+16, r25	; 0x10
    155a:	8f 87       	std	Y+15, r24	; 0x0f
    155c:	8f 85       	ldd	r24, Y+15	; 0x0f
    155e:	98 89       	ldd	r25, Y+16	; 0x10
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <Minutes_Selector+0x25e>
    1564:	98 8b       	std	Y+16, r25	; 0x10
    1566:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(30);
			if (PINB & (1<<Timer_Inc))
    1568:	e6 e3       	ldi	r30, 0x36	; 54
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	80 74       	andi	r24, 0x40	; 64
    1574:	90 70       	andi	r25, 0x00	; 0
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	e9 f0       	breq	.+58     	; 0x15b4 <Minutes_Selector+0x2b2>
			{
				++min_units;
    157a:	80 91 6a 00 	lds	r24, 0x006A
    157e:	8f 5f       	subi	r24, 0xFF	; 255
    1580:	80 93 6a 00 	sts	0x006A, r24
				if (10 == min_units)
    1584:	80 91 6a 00 	lds	r24, 0x006A
    1588:	8a 30       	cpi	r24, 0x0A	; 10
    158a:	39 f4       	brne	.+14     	; 0x159a <Minutes_Selector+0x298>
				{
					++min_tenth;
    158c:	80 91 6b 00 	lds	r24, 0x006B
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	80 93 6b 00 	sts	0x006B, r24
					min_units = 0;
    1596:	10 92 6a 00 	sts	0x006A, r1
				}
				if (6 == min_tenth )
    159a:	80 91 6b 00 	lds	r24, 0x006B
    159e:	86 30       	cpi	r24, 0x06	; 6
    15a0:	49 f4       	brne	.+18     	; 0x15b4 <Minutes_Selector+0x2b2>
				{
					min_tenth = min_units = 0;
    15a2:	10 92 6a 00 	sts	0x006A, r1
    15a6:	80 91 6a 00 	lds	r24, 0x006A
    15aa:	80 93 6b 00 	sts	0x006B, r24
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <Minutes_Selector+0x2b2>
				}
			}
			while ((PINB & (1<<Timer_Inc))) {display();}
    15b0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
    15b4:	e6 e3       	ldi	r30, 0x36	; 54
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	80 74       	andi	r24, 0x40	; 64
    15c0:	90 70       	andi	r25, 0x00	; 0
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	a9 f7       	brne	.-22     	; 0x15b0 <Minutes_Selector+0x2ae>
    15c6:	a5 c0       	rjmp	.+330    	; 0x1712 <Minutes_Selector+0x410>
		}
		else if (PINB & (1<<Timer_Dec))
    15c8:	e6 e3       	ldi	r30, 0x36	; 54
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	88 23       	and	r24, r24
    15d0:	0c f0       	brlt	.+2      	; 0x15d4 <Minutes_Selector+0x2d2>
    15d2:	9f c0       	rjmp	.+318    	; 0x1712 <Minutes_Selector+0x410>
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a0 ef       	ldi	r26, 0xF0	; 240
    15da:	b1 e4       	ldi	r27, 0x41	; 65
    15dc:	8b 87       	std	Y+11, r24	; 0x0b
    15de:	9c 87       	std	Y+12, r25	; 0x0c
    15e0:	ad 87       	std	Y+13, r26	; 0x0d
    15e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	4a e7       	ldi	r20, 0x7A	; 122
    15f2:	53 e4       	ldi	r21, 0x43	; 67
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	8f 83       	std	Y+7, r24	; 0x07
    15fe:	98 87       	std	Y+8, r25	; 0x08
    1600:	a9 87       	std	Y+9, r26	; 0x09
    1602:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1604:	6f 81       	ldd	r22, Y+7	; 0x07
    1606:	78 85       	ldd	r23, Y+8	; 0x08
    1608:	89 85       	ldd	r24, Y+9	; 0x09
    160a:	9a 85       	ldd	r25, Y+10	; 0x0a
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e8       	ldi	r20, 0x80	; 128
    1612:	5f e3       	ldi	r21, 0x3F	; 63
    1614:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1618:	88 23       	and	r24, r24
    161a:	2c f4       	brge	.+10     	; 0x1626 <Minutes_Selector+0x324>
		__ticks = 1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9e 83       	std	Y+6, r25	; 0x06
    1622:	8d 83       	std	Y+5, r24	; 0x05
    1624:	3f c0       	rjmp	.+126    	; 0x16a4 <Minutes_Selector+0x3a2>
	else if (__tmp > 65535)
    1626:	6f 81       	ldd	r22, Y+7	; 0x07
    1628:	78 85       	ldd	r23, Y+8	; 0x08
    162a:	89 85       	ldd	r24, Y+9	; 0x09
    162c:	9a 85       	ldd	r25, Y+10	; 0x0a
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	3f ef       	ldi	r19, 0xFF	; 255
    1632:	4f e7       	ldi	r20, 0x7F	; 127
    1634:	57 e4       	ldi	r21, 0x47	; 71
    1636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    163a:	18 16       	cp	r1, r24
    163c:	4c f5       	brge	.+82     	; 0x1690 <Minutes_Selector+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1640:	7c 85       	ldd	r23, Y+12	; 0x0c
    1642:	8d 85       	ldd	r24, Y+13	; 0x0d
    1644:	9e 85       	ldd	r25, Y+14	; 0x0e
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e2       	ldi	r20, 0x20	; 32
    164c:	51 e4       	ldi	r21, 0x41	; 65
    164e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <Minutes_Selector+0x384>
    1668:	89 e1       	ldi	r24, 0x19	; 25
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9c 83       	std	Y+4, r25	; 0x04
    166e:	8b 83       	std	Y+3, r24	; 0x03
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <Minutes_Selector+0x372>
    1678:	9c 83       	std	Y+4, r25	; 0x04
    167a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	69 f7       	brne	.-38     	; 0x1668 <Minutes_Selector+0x366>
    168e:	14 c0       	rjmp	.+40     	; 0x16b8 <Minutes_Selector+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1690:	6f 81       	ldd	r22, Y+7	; 0x07
    1692:	78 85       	ldd	r23, Y+8	; 0x08
    1694:	89 85       	ldd	r24, Y+9	; 0x09
    1696:	9a 85       	ldd	r25, Y+10	; 0x0a
    1698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	9a 81       	ldd	r25, Y+2	; 0x02
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <Minutes_Selector+0x3ae>
    16b4:	9a 83       	std	Y+2, r25	; 0x02
    16b6:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(30);
			if (PINB & (1<<Timer_Dec))
    16b8:	e6 e3       	ldi	r30, 0x36	; 54
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	88 23       	and	r24, r24
    16c0:	1c f5       	brge	.+70     	; 0x1708 <Minutes_Selector+0x406>
			{
				--min_units;
    16c2:	80 91 6a 00 	lds	r24, 0x006A
    16c6:	81 50       	subi	r24, 0x01	; 1
    16c8:	80 93 6a 00 	sts	0x006A, r24
				if (min_units == 255)
    16cc:	80 91 6a 00 	lds	r24, 0x006A
    16d0:	8f 3f       	cpi	r24, 0xFF	; 255
    16d2:	49 f4       	brne	.+18     	; 0x16e6 <Minutes_Selector+0x3e4>
				{
					--min_tenth;
    16d4:	80 91 6b 00 	lds	r24, 0x006B
    16d8:	81 50       	subi	r24, 0x01	; 1
    16da:	80 93 6b 00 	sts	0x006B, r24
					min_units = 9;
    16de:	89 e0       	ldi	r24, 0x09	; 9
    16e0:	80 93 6a 00 	sts	0x006A, r24
    16e4:	11 c0       	rjmp	.+34     	; 0x1708 <Minutes_Selector+0x406>
				}
				else if (min_tenth == 0 && min_units == 0)
    16e6:	80 91 6b 00 	lds	r24, 0x006B
    16ea:	88 23       	and	r24, r24
    16ec:	69 f4       	brne	.+26     	; 0x1708 <Minutes_Selector+0x406>
    16ee:	80 91 6a 00 	lds	r24, 0x006A
    16f2:	88 23       	and	r24, r24
    16f4:	49 f4       	brne	.+18     	; 0x1708 <Minutes_Selector+0x406>
				{
					min_units = 9; min_tenth = 5;
    16f6:	89 e0       	ldi	r24, 0x09	; 9
    16f8:	80 93 6a 00 	sts	0x006A, r24
    16fc:	85 e0       	ldi	r24, 0x05	; 5
    16fe:	80 93 6b 00 	sts	0x006B, r24
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <Minutes_Selector+0x406>
				}
			}
			while ((PINB & (1<<Timer_Dec))) {display();}
    1704:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
    1708:	e6 e3       	ldi	r30, 0x36	; 54
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	88 23       	and	r24, r24
    1710:	cc f3       	brlt	.-14     	; 0x1704 <Minutes_Selector+0x402>

void Minutes_Selector()
{
	while (PINB & (1<<Time_Selector)) {display();}
	PORTB &= ~(1<<Minutes_LED);
	while (selector == 2)
    1712:	80 91 6e 00 	lds	r24, 0x006E
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	09 f4       	brne	.+2      	; 0x171c <Minutes_Selector+0x41a>
    171a:	11 ce       	rjmp	.-990    	; 0x133e <Minutes_Selector+0x3c>
				}
			}
			while ((PINB & (1<<Timer_Dec))) {display();}
		}
	}
}
    171c:	aa 96       	adiw	r28, 0x2a	; 42
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <Hours_Selector>:

void Hours_Selector()
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	aa 97       	sbiw	r28, 0x2a	; 42
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <Hours_Selector+0x1a>
	while (PINB & (1<<Time_Selector)) {display();}
    1744:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
    1748:	e6 e3       	ldi	r30, 0x36	; 54
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	80 72       	andi	r24, 0x20	; 32
    1754:	90 70       	andi	r25, 0x00	; 0
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	a9 f7       	brne	.-22     	; 0x1744 <Hours_Selector+0x16>
	PORTB &= ~(1<<Hours_LED);
    175a:	a8 e3       	ldi	r26, 0x38	; 56
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e8 e3       	ldi	r30, 0x38	; 56
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	87 7f       	andi	r24, 0xF7	; 247
    1766:	8c 93       	st	X, r24
    1768:	ea c1       	rjmp	.+980    	; 0x1b3e <Hours_Selector+0x410>
	while (selector == 3)
	{
		PORTB |= (1<<Hours_LED);
    176a:	a8 e3       	ldi	r26, 0x38	; 56
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e8 e3       	ldi	r30, 0x38	; 56
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	88 60       	ori	r24, 0x08	; 8
    1776:	8c 93       	st	X, r24
		display();
    1778:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
		if (PINB & (1<<Time_Selector))
    177c:	e6 e3       	ldi	r30, 0x36	; 54
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	80 72       	andi	r24, 0x20	; 32
    1788:	90 70       	andi	r25, 0x00	; 0
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	09 f4       	brne	.+2      	; 0x1790 <Hours_Selector+0x62>
    178e:	86 c0       	rjmp	.+268    	; 0x189c <Hours_Selector+0x16e>
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a8 e4       	ldi	r26, 0x48	; 72
    1796:	b2 e4       	ldi	r27, 0x42	; 66
    1798:	8f a3       	std	Y+39, r24	; 0x27
    179a:	98 a7       	std	Y+40, r25	; 0x28
    179c:	a9 a7       	std	Y+41, r26	; 0x29
    179e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a0:	6f a1       	ldd	r22, Y+39	; 0x27
    17a2:	78 a5       	ldd	r23, Y+40	; 0x28
    17a4:	89 a5       	ldd	r24, Y+41	; 0x29
    17a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	4a e7       	ldi	r20, 0x7A	; 122
    17ae:	53 e4       	ldi	r21, 0x43	; 67
    17b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	8b a3       	std	Y+35, r24	; 0x23
    17ba:	9c a3       	std	Y+36, r25	; 0x24
    17bc:	ad a3       	std	Y+37, r26	; 0x25
    17be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17c0:	6b a1       	ldd	r22, Y+35	; 0x23
    17c2:	7c a1       	ldd	r23, Y+36	; 0x24
    17c4:	8d a1       	ldd	r24, Y+37	; 0x25
    17c6:	9e a1       	ldd	r25, Y+38	; 0x26
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	5f e3       	ldi	r21, 0x3F	; 63
    17d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17d4:	88 23       	and	r24, r24
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <Hours_Selector+0xb4>
		__ticks = 1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9a a3       	std	Y+34, r25	; 0x22
    17de:	89 a3       	std	Y+33, r24	; 0x21
    17e0:	3f c0       	rjmp	.+126    	; 0x1860 <Hours_Selector+0x132>
	else if (__tmp > 65535)
    17e2:	6b a1       	ldd	r22, Y+35	; 0x23
    17e4:	7c a1       	ldd	r23, Y+36	; 0x24
    17e6:	8d a1       	ldd	r24, Y+37	; 0x25
    17e8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	3f ef       	ldi	r19, 0xFF	; 255
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	57 e4       	ldi	r21, 0x47	; 71
    17f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17f6:	18 16       	cp	r1, r24
    17f8:	4c f5       	brge	.+82     	; 0x184c <Hours_Selector+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	6f a1       	ldd	r22, Y+39	; 0x27
    17fc:	78 a5       	ldd	r23, Y+40	; 0x28
    17fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1800:	9a a5       	ldd	r25, Y+42	; 0x2a
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9a a3       	std	Y+34, r25	; 0x22
    1820:	89 a3       	std	Y+33, r24	; 0x21
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <Hours_Selector+0x114>
    1824:	89 e1       	ldi	r24, 0x19	; 25
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	98 a3       	std	Y+32, r25	; 0x20
    182a:	8f 8f       	std	Y+31, r24	; 0x1f
    182c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    182e:	98 a1       	ldd	r25, Y+32	; 0x20
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <Hours_Selector+0x102>
    1834:	98 a3       	std	Y+32, r25	; 0x20
    1836:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1838:	89 a1       	ldd	r24, Y+33	; 0x21
    183a:	9a a1       	ldd	r25, Y+34	; 0x22
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	9a a3       	std	Y+34, r25	; 0x22
    1840:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	89 a1       	ldd	r24, Y+33	; 0x21
    1844:	9a a1       	ldd	r25, Y+34	; 0x22
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	69 f7       	brne	.-38     	; 0x1824 <Hours_Selector+0xf6>
    184a:	14 c0       	rjmp	.+40     	; 0x1874 <Hours_Selector+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184c:	6b a1       	ldd	r22, Y+35	; 0x23
    184e:	7c a1       	ldd	r23, Y+36	; 0x24
    1850:	8d a1       	ldd	r24, Y+37	; 0x25
    1852:	9e a1       	ldd	r25, Y+38	; 0x26
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9a a3       	std	Y+34, r25	; 0x22
    185e:	89 a3       	std	Y+33, r24	; 0x21
    1860:	89 a1       	ldd	r24, Y+33	; 0x21
    1862:	9a a1       	ldd	r25, Y+34	; 0x22
    1864:	9e 8f       	std	Y+30, r25	; 0x1e
    1866:	8d 8f       	std	Y+29, r24	; 0x1d
    1868:	8d 8d       	ldd	r24, Y+29	; 0x1d
    186a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <Hours_Selector+0x13e>
    1870:	9e 8f       	std	Y+30, r25	; 0x1e
    1872:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(50);
			if (PINB & (1<<Time_Selector))
    1874:	e6 e3       	ldi	r30, 0x36	; 54
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	80 72       	andi	r24, 0x20	; 32
    1880:	90 70       	andi	r25, 0x00	; 0
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	59 f0       	breq	.+22     	; 0x189c <Hours_Selector+0x16e>
			{
				PORTB &= ~(1<<Hours_LED);
    1886:	a8 e3       	ldi	r26, 0x38	; 56
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e8 e3       	ldi	r30, 0x38	; 56
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	87 7f       	andi	r24, 0xF7	; 247
    1892:	8c 93       	st	X, r24
				selector = -1;
    1894:	8f ef       	ldi	r24, 0xFF	; 255
    1896:	80 93 6e 00 	sts	0x006E, r24
    189a:	56 c1       	rjmp	.+684    	; 0x1b48 <Hours_Selector+0x41a>
				return;
			}
		}
		if (PINB & (1<<Timer_Inc))
    189c:	e6 e3       	ldi	r30, 0x36	; 54
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	80 74       	andi	r24, 0x40	; 64
    18a8:	90 70       	andi	r25, 0x00	; 0
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <Hours_Selector+0x182>
    18ae:	a2 c0       	rjmp	.+324    	; 0x19f4 <Hours_Selector+0x2c6>
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a0 ef       	ldi	r26, 0xF0	; 240
    18b6:	b1 e4       	ldi	r27, 0x41	; 65
    18b8:	89 8f       	std	Y+25, r24	; 0x19
    18ba:	9a 8f       	std	Y+26, r25	; 0x1a
    18bc:	ab 8f       	std	Y+27, r26	; 0x1b
    18be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c0:	69 8d       	ldd	r22, Y+25	; 0x19
    18c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4a e7       	ldi	r20, 0x7A	; 122
    18ce:	53 e4       	ldi	r21, 0x43	; 67
    18d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	8d 8b       	std	Y+21, r24	; 0x15
    18da:	9e 8b       	std	Y+22, r25	; 0x16
    18dc:	af 8b       	std	Y+23, r26	; 0x17
    18de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18e0:	6d 89       	ldd	r22, Y+21	; 0x15
    18e2:	7e 89       	ldd	r23, Y+22	; 0x16
    18e4:	8f 89       	ldd	r24, Y+23	; 0x17
    18e6:	98 8d       	ldd	r25, Y+24	; 0x18
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e8       	ldi	r20, 0x80	; 128
    18ee:	5f e3       	ldi	r21, 0x3F	; 63
    18f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f4:	88 23       	and	r24, r24
    18f6:	2c f4       	brge	.+10     	; 0x1902 <Hours_Selector+0x1d4>
		__ticks = 1;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	9c 8b       	std	Y+20, r25	; 0x14
    18fe:	8b 8b       	std	Y+19, r24	; 0x13
    1900:	3f c0       	rjmp	.+126    	; 0x1980 <Hours_Selector+0x252>
	else if (__tmp > 65535)
    1902:	6d 89       	ldd	r22, Y+21	; 0x15
    1904:	7e 89       	ldd	r23, Y+22	; 0x16
    1906:	8f 89       	ldd	r24, Y+23	; 0x17
    1908:	98 8d       	ldd	r25, Y+24	; 0x18
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	3f ef       	ldi	r19, 0xFF	; 255
    190e:	4f e7       	ldi	r20, 0x7F	; 127
    1910:	57 e4       	ldi	r21, 0x47	; 71
    1912:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1916:	18 16       	cp	r1, r24
    1918:	4c f5       	brge	.+82     	; 0x196c <Hours_Selector+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191a:	69 8d       	ldd	r22, Y+25	; 0x19
    191c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    191e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1920:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e2       	ldi	r20, 0x20	; 32
    1928:	51 e4       	ldi	r21, 0x41	; 65
    192a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	9c 8b       	std	Y+20, r25	; 0x14
    1940:	8b 8b       	std	Y+19, r24	; 0x13
    1942:	0f c0       	rjmp	.+30     	; 0x1962 <Hours_Selector+0x234>
    1944:	89 e1       	ldi	r24, 0x19	; 25
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9a 8b       	std	Y+18, r25	; 0x12
    194a:	89 8b       	std	Y+17, r24	; 0x11
    194c:	89 89       	ldd	r24, Y+17	; 0x11
    194e:	9a 89       	ldd	r25, Y+18	; 0x12
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <Hours_Selector+0x222>
    1954:	9a 8b       	std	Y+18, r25	; 0x12
    1956:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1958:	8b 89       	ldd	r24, Y+19	; 0x13
    195a:	9c 89       	ldd	r25, Y+20	; 0x14
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	9c 8b       	std	Y+20, r25	; 0x14
    1960:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1962:	8b 89       	ldd	r24, Y+19	; 0x13
    1964:	9c 89       	ldd	r25, Y+20	; 0x14
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	69 f7       	brne	.-38     	; 0x1944 <Hours_Selector+0x216>
    196a:	14 c0       	rjmp	.+40     	; 0x1994 <Hours_Selector+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196c:	6d 89       	ldd	r22, Y+21	; 0x15
    196e:	7e 89       	ldd	r23, Y+22	; 0x16
    1970:	8f 89       	ldd	r24, Y+23	; 0x17
    1972:	98 8d       	ldd	r25, Y+24	; 0x18
    1974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	9c 8b       	std	Y+20, r25	; 0x14
    197e:	8b 8b       	std	Y+19, r24	; 0x13
    1980:	8b 89       	ldd	r24, Y+19	; 0x13
    1982:	9c 89       	ldd	r25, Y+20	; 0x14
    1984:	98 8b       	std	Y+16, r25	; 0x10
    1986:	8f 87       	std	Y+15, r24	; 0x0f
    1988:	8f 85       	ldd	r24, Y+15	; 0x0f
    198a:	98 89       	ldd	r25, Y+16	; 0x10
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <Hours_Selector+0x25e>
    1990:	98 8b       	std	Y+16, r25	; 0x10
    1992:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(30);
			if (PINB & (1<<Timer_Inc))
    1994:	e6 e3       	ldi	r30, 0x36	; 54
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	80 74       	andi	r24, 0x40	; 64
    19a0:	90 70       	andi	r25, 0x00	; 0
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	e9 f0       	breq	.+58     	; 0x19e0 <Hours_Selector+0x2b2>
			{
				++hrs_units;
    19a6:	80 91 6c 00 	lds	r24, 0x006C
    19aa:	8f 5f       	subi	r24, 0xFF	; 255
    19ac:	80 93 6c 00 	sts	0x006C, r24
				if (10 == hrs_units)
    19b0:	80 91 6c 00 	lds	r24, 0x006C
    19b4:	8a 30       	cpi	r24, 0x0A	; 10
    19b6:	39 f4       	brne	.+14     	; 0x19c6 <Hours_Selector+0x298>
				{
					++hrs_tenth;
    19b8:	80 91 6d 00 	lds	r24, 0x006D
    19bc:	8f 5f       	subi	r24, 0xFF	; 255
    19be:	80 93 6d 00 	sts	0x006D, r24
					hrs_units = 0;
    19c2:	10 92 6c 00 	sts	0x006C, r1
				}
				if (6 == hrs_tenth )
    19c6:	80 91 6d 00 	lds	r24, 0x006D
    19ca:	86 30       	cpi	r24, 0x06	; 6
    19cc:	49 f4       	brne	.+18     	; 0x19e0 <Hours_Selector+0x2b2>
				{
					hrs_tenth = hrs_units = 0;
    19ce:	10 92 6c 00 	sts	0x006C, r1
    19d2:	80 91 6c 00 	lds	r24, 0x006C
    19d6:	80 93 6d 00 	sts	0x006D, r24
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <Hours_Selector+0x2b2>
				}
			}
			while ((PINB & (1<<Timer_Inc))) {display();}
    19dc:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
    19e0:	e6 e3       	ldi	r30, 0x36	; 54
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	80 74       	andi	r24, 0x40	; 64
    19ec:	90 70       	andi	r25, 0x00	; 0
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	a9 f7       	brne	.-22     	; 0x19dc <Hours_Selector+0x2ae>
    19f2:	a5 c0       	rjmp	.+330    	; 0x1b3e <Hours_Selector+0x410>
		}
		else if (PINB & (1<<Timer_Dec))
    19f4:	e6 e3       	ldi	r30, 0x36	; 54
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	88 23       	and	r24, r24
    19fc:	0c f0       	brlt	.+2      	; 0x1a00 <Hours_Selector+0x2d2>
    19fe:	9f c0       	rjmp	.+318    	; 0x1b3e <Hours_Selector+0x410>
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a0 ef       	ldi	r26, 0xF0	; 240
    1a06:	b1 e4       	ldi	r27, 0x41	; 65
    1a08:	8b 87       	std	Y+11, r24	; 0x0b
    1a0a:	9c 87       	std	Y+12, r25	; 0x0c
    1a0c:	ad 87       	std	Y+13, r26	; 0x0d
    1a0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	4a e7       	ldi	r20, 0x7A	; 122
    1a1e:	53 e4       	ldi	r21, 0x43	; 67
    1a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	8f 83       	std	Y+7, r24	; 0x07
    1a2a:	98 87       	std	Y+8, r25	; 0x08
    1a2c:	a9 87       	std	Y+9, r26	; 0x09
    1a2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a30:	6f 81       	ldd	r22, Y+7	; 0x07
    1a32:	78 85       	ldd	r23, Y+8	; 0x08
    1a34:	89 85       	ldd	r24, Y+9	; 0x09
    1a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e8       	ldi	r20, 0x80	; 128
    1a3e:	5f e3       	ldi	r21, 0x3F	; 63
    1a40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a44:	88 23       	and	r24, r24
    1a46:	2c f4       	brge	.+10     	; 0x1a52 <Hours_Selector+0x324>
		__ticks = 1;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	3f c0       	rjmp	.+126    	; 0x1ad0 <Hours_Selector+0x3a2>
	else if (__tmp > 65535)
    1a52:	6f 81       	ldd	r22, Y+7	; 0x07
    1a54:	78 85       	ldd	r23, Y+8	; 0x08
    1a56:	89 85       	ldd	r24, Y+9	; 0x09
    1a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	3f ef       	ldi	r19, 0xFF	; 255
    1a5e:	4f e7       	ldi	r20, 0x7F	; 127
    1a60:	57 e4       	ldi	r21, 0x47	; 71
    1a62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a66:	18 16       	cp	r1, r24
    1a68:	4c f5       	brge	.+82     	; 0x1abc <Hours_Selector+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e2       	ldi	r20, 0x20	; 32
    1a78:	51 e4       	ldi	r21, 0x41	; 65
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9e 83       	std	Y+6, r25	; 0x06
    1a90:	8d 83       	std	Y+5, r24	; 0x05
    1a92:	0f c0       	rjmp	.+30     	; 0x1ab2 <Hours_Selector+0x384>
    1a94:	89 e1       	ldi	r24, 0x19	; 25
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9c 83       	std	Y+4, r25	; 0x04
    1a9a:	8b 83       	std	Y+3, r24	; 0x03
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <Hours_Selector+0x372>
    1aa4:	9c 83       	std	Y+4, r25	; 0x04
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	9e 83       	std	Y+6, r25	; 0x06
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	69 f7       	brne	.-38     	; 0x1a94 <Hours_Selector+0x366>
    1aba:	14 c0       	rjmp	.+40     	; 0x1ae4 <Hours_Selector+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abc:	6f 81       	ldd	r22, Y+7	; 0x07
    1abe:	78 85       	ldd	r23, Y+8	; 0x08
    1ac0:	89 85       	ldd	r24, Y+9	; 0x09
    1ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	9e 83       	std	Y+6, r25	; 0x06
    1ace:	8d 83       	std	Y+5, r24	; 0x05
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	9a 83       	std	Y+2, r25	; 0x02
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	9a 81       	ldd	r25, Y+2	; 0x02
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <Hours_Selector+0x3ae>
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(30);
			if (PINB & (1<<Timer_Dec))
    1ae4:	e6 e3       	ldi	r30, 0x36	; 54
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 23       	and	r24, r24
    1aec:	1c f5       	brge	.+70     	; 0x1b34 <Hours_Selector+0x406>
			{
				--hrs_units;
    1aee:	80 91 6c 00 	lds	r24, 0x006C
    1af2:	81 50       	subi	r24, 0x01	; 1
    1af4:	80 93 6c 00 	sts	0x006C, r24
				if (hrs_units == 255)
    1af8:	80 91 6c 00 	lds	r24, 0x006C
    1afc:	8f 3f       	cpi	r24, 0xFF	; 255
    1afe:	49 f4       	brne	.+18     	; 0x1b12 <Hours_Selector+0x3e4>
				{
					--hrs_tenth;
    1b00:	80 91 6d 00 	lds	r24, 0x006D
    1b04:	81 50       	subi	r24, 0x01	; 1
    1b06:	80 93 6d 00 	sts	0x006D, r24
					hrs_units = 9;
    1b0a:	89 e0       	ldi	r24, 0x09	; 9
    1b0c:	80 93 6c 00 	sts	0x006C, r24
    1b10:	11 c0       	rjmp	.+34     	; 0x1b34 <Hours_Selector+0x406>
				}
				else if (hrs_tenth == 0 && hrs_units == 0)
    1b12:	80 91 6d 00 	lds	r24, 0x006D
    1b16:	88 23       	and	r24, r24
    1b18:	69 f4       	brne	.+26     	; 0x1b34 <Hours_Selector+0x406>
    1b1a:	80 91 6c 00 	lds	r24, 0x006C
    1b1e:	88 23       	and	r24, r24
    1b20:	49 f4       	brne	.+18     	; 0x1b34 <Hours_Selector+0x406>
				{
					hrs_units = 9; hrs_tenth = 5;
    1b22:	89 e0       	ldi	r24, 0x09	; 9
    1b24:	80 93 6c 00 	sts	0x006C, r24
    1b28:	85 e0       	ldi	r24, 0x05	; 5
    1b2a:	80 93 6d 00 	sts	0x006D, r24
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <Hours_Selector+0x406>
				}
			}
			while ((PINB & (1<<Timer_Dec))) {display();}
    1b30:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
    1b34:	e6 e3       	ldi	r30, 0x36	; 54
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	88 23       	and	r24, r24
    1b3c:	cc f3       	brlt	.-14     	; 0x1b30 <Hours_Selector+0x402>

void Hours_Selector()
{
	while (PINB & (1<<Time_Selector)) {display();}
	PORTB &= ~(1<<Hours_LED);
	while (selector == 3)
    1b3e:	80 91 6e 00 	lds	r24, 0x006E
    1b42:	83 30       	cpi	r24, 0x03	; 3
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <Hours_Selector+0x41a>
    1b46:	11 ce       	rjmp	.-990    	; 0x176a <Hours_Selector+0x3c>
				}
			}
			while ((PINB & (1<<Timer_Dec))) {display();}
		}
	}
}
    1b48:	aa 96       	adiw	r28, 0x2a	; 42
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <display>:


/*************************************** 7-Segments Display ***************************************/

void display ()
{
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	ce 55       	subi	r28, 0x5E	; 94
    1b68:	d0 40       	sbci	r29, 0x00	; 0
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
	PORTA = (1<<0);
    1b74:	eb e3       	ldi	r30, 0x3B	; 59
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (sec_units & 0x0F  ) ;
    1b7c:	a5 e3       	ldi	r26, 0x35	; 53
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e5 e3       	ldi	r30, 0x35	; 53
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	98 2f       	mov	r25, r24
    1b88:	90 7f       	andi	r25, 0xF0	; 240
    1b8a:	80 91 68 00 	lds	r24, 0x0068
    1b8e:	8f 70       	andi	r24, 0x0F	; 15
    1b90:	89 2b       	or	r24, r25
    1b92:	8c 93       	st	X, r24
    1b94:	fe 01       	movw	r30, r28
    1b96:	e5 5a       	subi	r30, 0xA5	; 165
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a0 ea       	ldi	r26, 0xA0	; 160
    1ba0:	b0 e4       	ldi	r27, 0x40	; 64
    1ba2:	80 83       	st	Z, r24
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	a2 83       	std	Z+2, r26	; 0x02
    1ba8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1baa:	8e 01       	movw	r16, r28
    1bac:	09 5a       	subi	r16, 0xA9	; 169
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e5 5a       	subi	r30, 0xA5	; 165
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	60 81       	ld	r22, Z
    1bb8:	71 81       	ldd	r23, Z+1	; 0x01
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	2b ea       	ldi	r18, 0xAB	; 171
    1bc0:	3a ea       	ldi	r19, 0xAA	; 170
    1bc2:	4a ea       	ldi	r20, 0xAA	; 170
    1bc4:	5e e3       	ldi	r21, 0x3E	; 62
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	f8 01       	movw	r30, r16
    1bd0:	80 83       	st	Z, r24
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	a2 83       	std	Z+2, r26	; 0x02
    1bd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e9 5a       	subi	r30, 0xA9	; 169
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	34 f4       	brge	.+12     	; 0x1c02 <display+0xa8>
		__ticks = 1;
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	ea 5a       	subi	r30, 0xAA	; 170
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	80 83       	st	Z, r24
    1c00:	e0 c0       	rjmp	.+448    	; 0x1dc2 <display+0x268>
	else if (__tmp > 255)
    1c02:	fe 01       	movw	r30, r28
    1c04:	e9 5a       	subi	r30, 0xA9	; 169
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	60 81       	ld	r22, Z
    1c0a:	71 81       	ldd	r23, Z+1	; 0x01
    1c0c:	82 81       	ldd	r24, Z+2	; 0x02
    1c0e:	93 81       	ldd	r25, Z+3	; 0x03
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4f e7       	ldi	r20, 0x7F	; 127
    1c16:	53 e4       	ldi	r21, 0x43	; 67
    1c18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c1c:	18 16       	cp	r1, r24
    1c1e:	0c f0       	brlt	.+2      	; 0x1c22 <display+0xc8>
    1c20:	c0 c0       	rjmp	.+384    	; 0x1da2 <display+0x248>
	{
		_delay_ms(__us / 1000.0);
    1c22:	fe 01       	movw	r30, r28
    1c24:	e5 5a       	subi	r30, 0xA5	; 165
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a e7       	ldi	r20, 0x7A	; 122
    1c36:	54 e4       	ldi	r21, 0x44	; 68
    1c38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	fe 01       	movw	r30, r28
    1c42:	ee 5a       	subi	r30, 0xAE	; 174
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	80 83       	st	Z, r24
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	a2 83       	std	Z+2, r26	; 0x02
    1c4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4e:	8e 01       	movw	r16, r28
    1c50:	02 5b       	subi	r16, 0xB2	; 178
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	fe 01       	movw	r30, r28
    1c56:	ee 5a       	subi	r30, 0xAE	; 174
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	60 81       	ld	r22, Z
    1c5c:	71 81       	ldd	r23, Z+1	; 0x01
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	4a e7       	ldi	r20, 0x7A	; 122
    1c68:	53 e4       	ldi	r21, 0x43	; 67
    1c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	f8 01       	movw	r30, r16
    1c74:	80 83       	st	Z, r24
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	a2 83       	std	Z+2, r26	; 0x02
    1c7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e2 5b       	subi	r30, 0xB2	; 178
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	60 81       	ld	r22, Z
    1c84:	71 81       	ldd	r23, Z+1	; 0x01
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	93 81       	ldd	r25, Z+3	; 0x03
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	44 f4       	brge	.+16     	; 0x1caa <display+0x150>
		__ticks = 1;
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e4 5b       	subi	r30, 0xB4	; 180
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	80 83       	st	Z, r24
    1ca8:	64 c0       	rjmp	.+200    	; 0x1d72 <display+0x218>
	else if (__tmp > 65535)
    1caa:	fe 01       	movw	r30, r28
    1cac:	e2 5b       	subi	r30, 0xB2	; 178
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc4:	18 16       	cp	r1, r24
    1cc6:	0c f0       	brlt	.+2      	; 0x1cca <display+0x170>
    1cc8:	43 c0       	rjmp	.+134    	; 0x1d50 <display+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ee 5a       	subi	r30, 0xAE	; 174
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	60 81       	ld	r22, Z
    1cd2:	71 81       	ldd	r23, Z+1	; 0x01
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	8e 01       	movw	r16, r28
    1cea:	04 5b       	subi	r16, 0xB4	; 180
    1cec:	1f 4f       	sbci	r17, 0xFF	; 255
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	91 83       	std	Z+1, r25	; 0x01
    1cfe:	80 83       	st	Z, r24
    1d00:	1f c0       	rjmp	.+62     	; 0x1d40 <display+0x1e6>
    1d02:	fe 01       	movw	r30, r28
    1d04:	e6 5b       	subi	r30, 0xB6	; 182
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	89 e1       	ldi	r24, 0x19	; 25
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	80 83       	st	Z, r24
    1d10:	fe 01       	movw	r30, r28
    1d12:	e6 5b       	subi	r30, 0xB6	; 182
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <display+0x1c0>
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e6 5b       	subi	r30, 0xB6	; 182
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	de 01       	movw	r26, r28
    1d2a:	a4 5b       	subi	r26, 0xB4	; 180
    1d2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e4 5b       	subi	r30, 0xB4	; 180
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	91 81       	ldd	r25, Z+1	; 0x01
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	11 96       	adiw	r26, 0x01	; 1
    1d3c:	9c 93       	st	X, r25
    1d3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	fe 01       	movw	r30, r28
    1d42:	e4 5b       	subi	r30, 0xB4	; 180
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	91 81       	ldd	r25, Z+1	; 0x01
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	d1 f6       	brne	.-76     	; 0x1d02 <display+0x1a8>
    1d4e:	4b c0       	rjmp	.+150    	; 0x1de6 <display+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	8e 01       	movw	r16, r28
    1d52:	04 5b       	subi	r16, 0xB4	; 180
    1d54:	1f 4f       	sbci	r17, 0xFF	; 255
    1d56:	fe 01       	movw	r30, r28
    1d58:	e2 5b       	subi	r30, 0xB2	; 178
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	60 81       	ld	r22, Z
    1d5e:	71 81       	ldd	r23, Z+1	; 0x01
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	80 83       	st	Z, r24
    1d72:	de 01       	movw	r26, r28
    1d74:	a8 5b       	subi	r26, 0xB8	; 184
    1d76:	bf 4f       	sbci	r27, 0xFF	; 255
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e4 5b       	subi	r30, 0xB4	; 180
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 81       	ld	r24, Z
    1d80:	91 81       	ldd	r25, Z+1	; 0x01
    1d82:	11 96       	adiw	r26, 0x01	; 1
    1d84:	9c 93       	st	X, r25
    1d86:	8e 93       	st	-X, r24
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e8 5b       	subi	r30, 0xB8	; 184
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	91 81       	ldd	r25, Z+1	; 0x01
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <display+0x238>
    1d96:	fe 01       	movw	r30, r28
    1d98:	e8 5b       	subi	r30, 0xB8	; 184
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    1da0:	22 c0       	rjmp	.+68     	; 0x1de6 <display+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1da2:	8e 01       	movw	r16, r28
    1da4:	0a 5a       	subi	r16, 0xAA	; 170
    1da6:	1f 4f       	sbci	r17, 0xFF	; 255
    1da8:	fe 01       	movw	r30, r28
    1daa:	e9 5a       	subi	r30, 0xA9	; 169
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	60 81       	ld	r22, Z
    1db0:	71 81       	ldd	r23, Z+1	; 0x01
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	80 83       	st	Z, r24
    1dc2:	de 01       	movw	r26, r28
    1dc4:	a9 5b       	subi	r26, 0xB9	; 185
    1dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc8:	fe 01       	movw	r30, r28
    1dca:	ea 5a       	subi	r30, 0xAA	; 170
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	e9 5b       	subi	r30, 0xB9	; 185
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 81       	ld	r24, Z
    1dda:	8a 95       	dec	r24
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <display+0x280>
    1dde:	fe 01       	movw	r30, r28
    1de0:	e9 5b       	subi	r30, 0xB9	; 185
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	80 83       	st	Z, r24
	_delay_us(5) ;

	PORTA = (1<<1);
    1de6:	eb e3       	ldi	r30, 0x3B	; 59
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (sec_tenth & 0x0F  ) ;
    1dee:	a5 e3       	ldi	r26, 0x35	; 53
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e5 e3       	ldi	r30, 0x35	; 53
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	98 2f       	mov	r25, r24
    1dfa:	90 7f       	andi	r25, 0xF0	; 240
    1dfc:	80 91 69 00 	lds	r24, 0x0069
    1e00:	8f 70       	andi	r24, 0x0F	; 15
    1e02:	89 2b       	or	r24, r25
    1e04:	8c 93       	st	X, r24
    1e06:	fe 01       	movw	r30, r28
    1e08:	ed 5b       	subi	r30, 0xBD	; 189
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a0 ea       	ldi	r26, 0xA0	; 160
    1e12:	b0 e4       	ldi	r27, 0x40	; 64
    1e14:	80 83       	st	Z, r24
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	a2 83       	std	Z+2, r26	; 0x02
    1e1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1c:	8e 01       	movw	r16, r28
    1e1e:	01 5c       	subi	r16, 0xC1	; 193
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	fe 01       	movw	r30, r28
    1e24:	ed 5b       	subi	r30, 0xBD	; 189
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a e7       	ldi	r20, 0x7A	; 122
    1e36:	53 e4       	ldi	r21, 0x43	; 67
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	80 83       	st	Z, r24
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	a2 83       	std	Z+2, r26	; 0x02
    1e48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ff 96       	adiw	r30, 0x3f	; 63
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e8       	ldi	r20, 0x80	; 128
    1e5c:	5f e3       	ldi	r21, 0x3F	; 63
    1e5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e62:	88 23       	and	r24, r24
    1e64:	2c f4       	brge	.+10     	; 0x1e70 <display+0x316>
		__ticks = 1;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9e af       	std	Y+62, r25	; 0x3e
    1e6c:	8d af       	std	Y+61, r24	; 0x3d
    1e6e:	46 c0       	rjmp	.+140    	; 0x1efc <display+0x3a2>
	else if (__tmp > 65535)
    1e70:	fe 01       	movw	r30, r28
    1e72:	ff 96       	adiw	r30, 0x3f	; 63
    1e74:	60 81       	ld	r22, Z
    1e76:	71 81       	ldd	r23, Z+1	; 0x01
    1e78:	82 81       	ldd	r24, Z+2	; 0x02
    1e7a:	93 81       	ldd	r25, Z+3	; 0x03
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	3f ef       	ldi	r19, 0xFF	; 255
    1e80:	4f e7       	ldi	r20, 0x7F	; 127
    1e82:	57 e4       	ldi	r21, 0x47	; 71
    1e84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e88:	18 16       	cp	r1, r24
    1e8a:	64 f5       	brge	.+88     	; 0x1ee4 <display+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ed 5b       	subi	r30, 0xBD	; 189
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9e af       	std	Y+62, r25	; 0x3e
    1eb8:	8d af       	std	Y+61, r24	; 0x3d
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <display+0x380>
    1ebc:	89 e1       	ldi	r24, 0x19	; 25
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9c af       	std	Y+60, r25	; 0x3c
    1ec2:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ec4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ec6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <display+0x36e>
    1ecc:	9c af       	std	Y+60, r25	; 0x3c
    1ece:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ed2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9e af       	std	Y+62, r25	; 0x3e
    1ed8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	8d ad       	ldd	r24, Y+61	; 0x3d
    1edc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <display+0x362>
    1ee2:	16 c0       	rjmp	.+44     	; 0x1f10 <display+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ff 96       	adiw	r30, 0x3f	; 63
    1ee8:	60 81       	ld	r22, Z
    1eea:	71 81       	ldd	r23, Z+1	; 0x01
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	93 81       	ldd	r25, Z+3	; 0x03
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9e af       	std	Y+62, r25	; 0x3e
    1efa:	8d af       	std	Y+61, r24	; 0x3d
    1efc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1efe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f00:	9a af       	std	Y+58, r25	; 0x3a
    1f02:	89 af       	std	Y+57, r24	; 0x39
    1f04:	89 ad       	ldd	r24, Y+57	; 0x39
    1f06:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <display+0x3ae>
    1f0c:	9a af       	std	Y+58, r25	; 0x3a
    1f0e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5) ;

	PORTA = (1<<2);
    1f10:	eb e3       	ldi	r30, 0x3B	; 59
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	84 e0       	ldi	r24, 0x04	; 4
    1f16:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (min_units & 0x0F  ) ;
    1f18:	a5 e3       	ldi	r26, 0x35	; 53
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e5 e3       	ldi	r30, 0x35	; 53
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	98 2f       	mov	r25, r24
    1f24:	90 7f       	andi	r25, 0xF0	; 240
    1f26:	80 91 6a 00 	lds	r24, 0x006A
    1f2a:	8f 70       	andi	r24, 0x0F	; 15
    1f2c:	89 2b       	or	r24, r25
    1f2e:	8c 93       	st	X, r24
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 ea       	ldi	r26, 0xA0	; 160
    1f36:	b0 e4       	ldi	r27, 0x40	; 64
    1f38:	8d ab       	std	Y+53, r24	; 0x35
    1f3a:	9e ab       	std	Y+54, r25	; 0x36
    1f3c:	af ab       	std	Y+55, r26	; 0x37
    1f3e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	6d a9       	ldd	r22, Y+53	; 0x35
    1f42:	7e a9       	ldd	r23, Y+54	; 0x36
    1f44:	8f a9       	ldd	r24, Y+55	; 0x37
    1f46:	98 ad       	ldd	r25, Y+56	; 0x38
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a e7       	ldi	r20, 0x7A	; 122
    1f4e:	53 e4       	ldi	r21, 0x43	; 67
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	89 ab       	std	Y+49, r24	; 0x31
    1f5a:	9a ab       	std	Y+50, r25	; 0x32
    1f5c:	ab ab       	std	Y+51, r26	; 0x33
    1f5e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f60:	69 a9       	ldd	r22, Y+49	; 0x31
    1f62:	7a a9       	ldd	r23, Y+50	; 0x32
    1f64:	8b a9       	ldd	r24, Y+51	; 0x33
    1f66:	9c a9       	ldd	r25, Y+52	; 0x34
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <display+0x428>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	98 ab       	std	Y+48, r25	; 0x30
    1f7e:	8f a7       	std	Y+47, r24	; 0x2f
    1f80:	3f c0       	rjmp	.+126    	; 0x2000 <display+0x4a6>
	else if (__tmp > 65535)
    1f82:	69 a9       	ldd	r22, Y+49	; 0x31
    1f84:	7a a9       	ldd	r23, Y+50	; 0x32
    1f86:	8b a9       	ldd	r24, Y+51	; 0x33
    1f88:	9c a9       	ldd	r25, Y+52	; 0x34
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	4c f5       	brge	.+82     	; 0x1fec <display+0x492>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1fa0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	51 e4       	ldi	r21, 0x41	; 65
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	98 ab       	std	Y+48, r25	; 0x30
    1fc0:	8f a7       	std	Y+47, r24	; 0x2f
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <display+0x488>
    1fc4:	89 e1       	ldi	r24, 0x19	; 25
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9e a7       	std	Y+46, r25	; 0x2e
    1fca:	8d a7       	std	Y+45, r24	; 0x2d
    1fcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fce:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <display+0x476>
    1fd4:	9e a7       	std	Y+46, r25	; 0x2e
    1fd6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fda:	98 a9       	ldd	r25, Y+48	; 0x30
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	98 ab       	std	Y+48, r25	; 0x30
    1fe0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	69 f7       	brne	.-38     	; 0x1fc4 <display+0x46a>
    1fea:	14 c0       	rjmp	.+40     	; 0x2014 <display+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fec:	69 a9       	ldd	r22, Y+49	; 0x31
    1fee:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	98 ab       	std	Y+48, r25	; 0x30
    1ffe:	8f a7       	std	Y+47, r24	; 0x2f
    2000:	8f a5       	ldd	r24, Y+47	; 0x2f
    2002:	98 a9       	ldd	r25, Y+48	; 0x30
    2004:	9c a7       	std	Y+44, r25	; 0x2c
    2006:	8b a7       	std	Y+43, r24	; 0x2b
    2008:	8b a5       	ldd	r24, Y+43	; 0x2b
    200a:	9c a5       	ldd	r25, Y+44	; 0x2c
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <display+0x4b2>
    2010:	9c a7       	std	Y+44, r25	; 0x2c
    2012:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5) ;

	PORTA = (1<<3);
    2014:	eb e3       	ldi	r30, 0x3B	; 59
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	88 e0       	ldi	r24, 0x08	; 8
    201a:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (min_tenth & 0x0F  ) ;
    201c:	a5 e3       	ldi	r26, 0x35	; 53
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e5 e3       	ldi	r30, 0x35	; 53
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	98 2f       	mov	r25, r24
    2028:	90 7f       	andi	r25, 0xF0	; 240
    202a:	80 91 6b 00 	lds	r24, 0x006B
    202e:	8f 70       	andi	r24, 0x0F	; 15
    2030:	89 2b       	or	r24, r25
    2032:	8c 93       	st	X, r24
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 ea       	ldi	r26, 0xA0	; 160
    203a:	b0 e4       	ldi	r27, 0x40	; 64
    203c:	8f a3       	std	Y+39, r24	; 0x27
    203e:	98 a7       	std	Y+40, r25	; 0x28
    2040:	a9 a7       	std	Y+41, r26	; 0x29
    2042:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2044:	6f a1       	ldd	r22, Y+39	; 0x27
    2046:	78 a5       	ldd	r23, Y+40	; 0x28
    2048:	89 a5       	ldd	r24, Y+41	; 0x29
    204a:	9a a5       	ldd	r25, Y+42	; 0x2a
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	4a e7       	ldi	r20, 0x7A	; 122
    2052:	53 e4       	ldi	r21, 0x43	; 67
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	8b a3       	std	Y+35, r24	; 0x23
    205e:	9c a3       	std	Y+36, r25	; 0x24
    2060:	ad a3       	std	Y+37, r26	; 0x25
    2062:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2064:	6b a1       	ldd	r22, Y+35	; 0x23
    2066:	7c a1       	ldd	r23, Y+36	; 0x24
    2068:	8d a1       	ldd	r24, Y+37	; 0x25
    206a:	9e a1       	ldd	r25, Y+38	; 0x26
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e8       	ldi	r20, 0x80	; 128
    2072:	5f e3       	ldi	r21, 0x3F	; 63
    2074:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2078:	88 23       	and	r24, r24
    207a:	2c f4       	brge	.+10     	; 0x2086 <display+0x52c>
		__ticks = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9a a3       	std	Y+34, r25	; 0x22
    2082:	89 a3       	std	Y+33, r24	; 0x21
    2084:	3f c0       	rjmp	.+126    	; 0x2104 <display+0x5aa>
	else if (__tmp > 65535)
    2086:	6b a1       	ldd	r22, Y+35	; 0x23
    2088:	7c a1       	ldd	r23, Y+36	; 0x24
    208a:	8d a1       	ldd	r24, Y+37	; 0x25
    208c:	9e a1       	ldd	r25, Y+38	; 0x26
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	3f ef       	ldi	r19, 0xFF	; 255
    2092:	4f e7       	ldi	r20, 0x7F	; 127
    2094:	57 e4       	ldi	r21, 0x47	; 71
    2096:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209a:	18 16       	cp	r1, r24
    209c:	4c f5       	brge	.+82     	; 0x20f0 <display+0x596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209e:	6f a1       	ldd	r22, Y+39	; 0x27
    20a0:	78 a5       	ldd	r23, Y+40	; 0x28
    20a2:	89 a5       	ldd	r24, Y+41	; 0x29
    20a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e2       	ldi	r20, 0x20	; 32
    20ac:	51 e4       	ldi	r21, 0x41	; 65
    20ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9a a3       	std	Y+34, r25	; 0x22
    20c4:	89 a3       	std	Y+33, r24	; 0x21
    20c6:	0f c0       	rjmp	.+30     	; 0x20e6 <display+0x58c>
    20c8:	89 e1       	ldi	r24, 0x19	; 25
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	98 a3       	std	Y+32, r25	; 0x20
    20ce:	8f 8f       	std	Y+31, r24	; 0x1f
    20d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20d2:	98 a1       	ldd	r25, Y+32	; 0x20
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <display+0x57a>
    20d8:	98 a3       	std	Y+32, r25	; 0x20
    20da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20dc:	89 a1       	ldd	r24, Y+33	; 0x21
    20de:	9a a1       	ldd	r25, Y+34	; 0x22
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	9a a3       	std	Y+34, r25	; 0x22
    20e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e6:	89 a1       	ldd	r24, Y+33	; 0x21
    20e8:	9a a1       	ldd	r25, Y+34	; 0x22
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	69 f7       	brne	.-38     	; 0x20c8 <display+0x56e>
    20ee:	14 c0       	rjmp	.+40     	; 0x2118 <display+0x5be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f0:	6b a1       	ldd	r22, Y+35	; 0x23
    20f2:	7c a1       	ldd	r23, Y+36	; 0x24
    20f4:	8d a1       	ldd	r24, Y+37	; 0x25
    20f6:	9e a1       	ldd	r25, Y+38	; 0x26
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9a a3       	std	Y+34, r25	; 0x22
    2102:	89 a3       	std	Y+33, r24	; 0x21
    2104:	89 a1       	ldd	r24, Y+33	; 0x21
    2106:	9a a1       	ldd	r25, Y+34	; 0x22
    2108:	9e 8f       	std	Y+30, r25	; 0x1e
    210a:	8d 8f       	std	Y+29, r24	; 0x1d
    210c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    210e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <display+0x5b6>
    2114:	9e 8f       	std	Y+30, r25	; 0x1e
    2116:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5) ;

	PORTA = (1<<4);
    2118:	eb e3       	ldi	r30, 0x3B	; 59
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 e1       	ldi	r24, 0x10	; 16
    211e:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (hrs_units & 0x0F  ) ;
    2120:	a5 e3       	ldi	r26, 0x35	; 53
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e5 e3       	ldi	r30, 0x35	; 53
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	98 2f       	mov	r25, r24
    212c:	90 7f       	andi	r25, 0xF0	; 240
    212e:	80 91 6c 00 	lds	r24, 0x006C
    2132:	8f 70       	andi	r24, 0x0F	; 15
    2134:	89 2b       	or	r24, r25
    2136:	8c 93       	st	X, r24
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 ea       	ldi	r26, 0xA0	; 160
    213e:	b0 e4       	ldi	r27, 0x40	; 64
    2140:	89 8f       	std	Y+25, r24	; 0x19
    2142:	9a 8f       	std	Y+26, r25	; 0x1a
    2144:	ab 8f       	std	Y+27, r26	; 0x1b
    2146:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2148:	69 8d       	ldd	r22, Y+25	; 0x19
    214a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    214c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a e7       	ldi	r20, 0x7A	; 122
    2156:	53 e4       	ldi	r21, 0x43	; 67
    2158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	8d 8b       	std	Y+21, r24	; 0x15
    2162:	9e 8b       	std	Y+22, r25	; 0x16
    2164:	af 8b       	std	Y+23, r26	; 0x17
    2166:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2168:	6d 89       	ldd	r22, Y+21	; 0x15
    216a:	7e 89       	ldd	r23, Y+22	; 0x16
    216c:	8f 89       	ldd	r24, Y+23	; 0x17
    216e:	98 8d       	ldd	r25, Y+24	; 0x18
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217c:	88 23       	and	r24, r24
    217e:	2c f4       	brge	.+10     	; 0x218a <display+0x630>
		__ticks = 1;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9c 8b       	std	Y+20, r25	; 0x14
    2186:	8b 8b       	std	Y+19, r24	; 0x13
    2188:	3f c0       	rjmp	.+126    	; 0x2208 <display+0x6ae>
	else if (__tmp > 65535)
    218a:	6d 89       	ldd	r22, Y+21	; 0x15
    218c:	7e 89       	ldd	r23, Y+22	; 0x16
    218e:	8f 89       	ldd	r24, Y+23	; 0x17
    2190:	98 8d       	ldd	r25, Y+24	; 0x18
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	4c f5       	brge	.+82     	; 0x21f4 <display+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	69 8d       	ldd	r22, Y+25	; 0x19
    21a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
    21ca:	0f c0       	rjmp	.+30     	; 0x21ea <display+0x690>
    21cc:	89 e1       	ldi	r24, 0x19	; 25
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9a 8b       	std	Y+18, r25	; 0x12
    21d2:	89 8b       	std	Y+17, r24	; 0x11
    21d4:	89 89       	ldd	r24, Y+17	; 0x11
    21d6:	9a 89       	ldd	r25, Y+18	; 0x12
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <display+0x67e>
    21dc:	9a 8b       	std	Y+18, r25	; 0x12
    21de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e0:	8b 89       	ldd	r24, Y+19	; 0x13
    21e2:	9c 89       	ldd	r25, Y+20	; 0x14
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	9c 8b       	std	Y+20, r25	; 0x14
    21e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ea:	8b 89       	ldd	r24, Y+19	; 0x13
    21ec:	9c 89       	ldd	r25, Y+20	; 0x14
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	69 f7       	brne	.-38     	; 0x21cc <display+0x672>
    21f2:	14 c0       	rjmp	.+40     	; 0x221c <display+0x6c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f4:	6d 89       	ldd	r22, Y+21	; 0x15
    21f6:	7e 89       	ldd	r23, Y+22	; 0x16
    21f8:	8f 89       	ldd	r24, Y+23	; 0x17
    21fa:	98 8d       	ldd	r25, Y+24	; 0x18
    21fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	9c 8b       	std	Y+20, r25	; 0x14
    2206:	8b 8b       	std	Y+19, r24	; 0x13
    2208:	8b 89       	ldd	r24, Y+19	; 0x13
    220a:	9c 89       	ldd	r25, Y+20	; 0x14
    220c:	98 8b       	std	Y+16, r25	; 0x10
    220e:	8f 87       	std	Y+15, r24	; 0x0f
    2210:	8f 85       	ldd	r24, Y+15	; 0x0f
    2212:	98 89       	ldd	r25, Y+16	; 0x10
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <display+0x6ba>
    2218:	98 8b       	std	Y+16, r25	; 0x10
    221a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5) ;

	PORTA = (1<<5);
    221c:	eb e3       	ldi	r30, 0x3B	; 59
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 e2       	ldi	r24, 0x20	; 32
    2222:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (hrs_tenth & 0x0F  ) ;
    2224:	a5 e3       	ldi	r26, 0x35	; 53
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e5 e3       	ldi	r30, 0x35	; 53
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	98 2f       	mov	r25, r24
    2230:	90 7f       	andi	r25, 0xF0	; 240
    2232:	80 91 6d 00 	lds	r24, 0x006D
    2236:	8f 70       	andi	r24, 0x0F	; 15
    2238:	89 2b       	or	r24, r25
    223a:	8c 93       	st	X, r24
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	a0 ea       	ldi	r26, 0xA0	; 160
    2242:	b0 e4       	ldi	r27, 0x40	; 64
    2244:	8b 87       	std	Y+11, r24	; 0x0b
    2246:	9c 87       	std	Y+12, r25	; 0x0c
    2248:	ad 87       	std	Y+13, r26	; 0x0d
    224a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224c:	6b 85       	ldd	r22, Y+11	; 0x0b
    224e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2250:	8d 85       	ldd	r24, Y+13	; 0x0d
    2252:	9e 85       	ldd	r25, Y+14	; 0x0e
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	4a e7       	ldi	r20, 0x7A	; 122
    225a:	53 e4       	ldi	r21, 0x43	; 67
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	8f 83       	std	Y+7, r24	; 0x07
    2266:	98 87       	std	Y+8, r25	; 0x08
    2268:	a9 87       	std	Y+9, r26	; 0x09
    226a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e8       	ldi	r20, 0x80	; 128
    227a:	5f e3       	ldi	r21, 0x3F	; 63
    227c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2280:	88 23       	and	r24, r24
    2282:	2c f4       	brge	.+10     	; 0x228e <display+0x734>
		__ticks = 1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	8d 83       	std	Y+5, r24	; 0x05
    228c:	3f c0       	rjmp	.+126    	; 0x230c <display+0x7b2>
	else if (__tmp > 65535)
    228e:	6f 81       	ldd	r22, Y+7	; 0x07
    2290:	78 85       	ldd	r23, Y+8	; 0x08
    2292:	89 85       	ldd	r24, Y+9	; 0x09
    2294:	9a 85       	ldd	r25, Y+10	; 0x0a
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	3f ef       	ldi	r19, 0xFF	; 255
    229a:	4f e7       	ldi	r20, 0x7F	; 127
    229c:	57 e4       	ldi	r21, 0x47	; 71
    229e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a2:	18 16       	cp	r1, r24
    22a4:	4c f5       	brge	.+82     	; 0x22f8 <display+0x79e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e2       	ldi	r20, 0x20	; 32
    22b4:	51 e4       	ldi	r21, 0x41	; 65
    22b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	bc 01       	movw	r22, r24
    22c0:	cd 01       	movw	r24, r26
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
    22ce:	0f c0       	rjmp	.+30     	; 0x22ee <display+0x794>
    22d0:	89 e1       	ldi	r24, 0x19	; 25
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9c 83       	std	Y+4, r25	; 0x04
    22d6:	8b 83       	std	Y+3, r24	; 0x03
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <display+0x782>
    22e0:	9c 83       	std	Y+4, r25	; 0x04
    22e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	9e 81       	ldd	r25, Y+6	; 0x06
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05
    22f0:	9e 81       	ldd	r25, Y+6	; 0x06
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	69 f7       	brne	.-38     	; 0x22d0 <display+0x776>
    22f6:	14 c0       	rjmp	.+40     	; 0x2320 <display+0x7c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	9a 81       	ldd	r25, Y+2	; 0x02
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <display+0x7be>
    231c:	9a 83       	std	Y+2, r25	; 0x02
    231e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5) ;


	if (0 == hrs_tenth && 0 == hrs_units && 0 == min_tenth && 0 == min_units && 0 == sec_tenth && 0 == sec_units)
    2320:	80 91 6d 00 	lds	r24, 0x006D
    2324:	88 23       	and	r24, r24
    2326:	e1 f4       	brne	.+56     	; 0x2360 <display+0x806>
    2328:	80 91 6c 00 	lds	r24, 0x006C
    232c:	88 23       	and	r24, r24
    232e:	c1 f4       	brne	.+48     	; 0x2360 <display+0x806>
    2330:	80 91 6b 00 	lds	r24, 0x006B
    2334:	88 23       	and	r24, r24
    2336:	a1 f4       	brne	.+40     	; 0x2360 <display+0x806>
    2338:	80 91 6a 00 	lds	r24, 0x006A
    233c:	88 23       	and	r24, r24
    233e:	81 f4       	brne	.+32     	; 0x2360 <display+0x806>
    2340:	80 91 69 00 	lds	r24, 0x0069
    2344:	88 23       	and	r24, r24
    2346:	61 f4       	brne	.+24     	; 0x2360 <display+0x806>
    2348:	80 91 68 00 	lds	r24, 0x0068
    234c:	88 23       	and	r24, r24
    234e:	41 f4       	brne	.+16     	; 0x2360 <display+0x806>
	{
		PORTD |= (1<<Timer_LED);					// Turn on LED when timer reaches 0
    2350:	a2 e3       	ldi	r26, 0x32	; 50
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e2 e3       	ldi	r30, 0x32	; 50
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	80 64       	ori	r24, 0x40	; 64
    235c:	8c 93       	st	X, r24
    235e:	07 c0       	rjmp	.+14     	; 0x236e <display+0x814>
	}
	else
		PORTD &= ~(1<<Timer_LED);
    2360:	a2 e3       	ldi	r26, 0x32	; 50
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e2 e3       	ldi	r30, 0x32	; 50
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	8f 7b       	andi	r24, 0xBF	; 191
    236c:	8c 93       	st	X, r24
}
    236e:	c2 5a       	subi	r28, 0xA2	; 162
    2370:	df 4f       	sbci	r29, 0xFF	; 255
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	cd bf       	out	0x3d, r28	; 61
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	08 95       	ret

00002386 <Stop_Watch_Mode>:

/***************************************** Stop Watch Mode *****************************************/

void Stop_Watch_Mode (void)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	62 c0       	rjmp	.+196    	; 0x2454 <Stop_Watch_Mode+0xce>
	while ( !(PIND & (1<<Mode_Selector)))			// If Timer mode selected ( Pin is HIGH )
	{
		display();
    2390:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>

		PORTD &= ~(1<<Timer_LED);					// Turn Off Timer LED
    2394:	a2 e3       	ldi	r26, 0x32	; 50
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e2 e3       	ldi	r30, 0x32	; 50
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	8f 7b       	andi	r24, 0xBF	; 191
    23a0:	8c 93       	st	X, r24
		/* Seconds */
		if (sec_units == 10)
    23a2:	80 91 68 00 	lds	r24, 0x0068
    23a6:	8a 30       	cpi	r24, 0x0A	; 10
    23a8:	39 f4       	brne	.+14     	; 0x23b8 <Stop_Watch_Mode+0x32>
		{
			++sec_tenth;
    23aa:	80 91 69 00 	lds	r24, 0x0069
    23ae:	8f 5f       	subi	r24, 0xFF	; 255
    23b0:	80 93 69 00 	sts	0x0069, r24
			sec_units = 0;
    23b4:	10 92 68 00 	sts	0x0068, r1
		}
		if (sec_tenth == 6)
    23b8:	80 91 69 00 	lds	r24, 0x0069
    23bc:	86 30       	cpi	r24, 0x06	; 6
    23be:	59 f4       	brne	.+22     	; 0x23d6 <Stop_Watch_Mode+0x50>
		{
			sec_tenth = sec_units = 0;
    23c0:	10 92 68 00 	sts	0x0068, r1
    23c4:	80 91 68 00 	lds	r24, 0x0068
    23c8:	80 93 69 00 	sts	0x0069, r24
			++min_units;
    23cc:	80 91 6a 00 	lds	r24, 0x006A
    23d0:	8f 5f       	subi	r24, 0xFF	; 255
    23d2:	80 93 6a 00 	sts	0x006A, r24
		}

		/* Minutes */
		if (min_units == 10)
    23d6:	80 91 6a 00 	lds	r24, 0x006A
    23da:	8a 30       	cpi	r24, 0x0A	; 10
    23dc:	39 f4       	brne	.+14     	; 0x23ec <Stop_Watch_Mode+0x66>
		{
			min_units=0;
    23de:	10 92 6a 00 	sts	0x006A, r1
			++min_tenth;
    23e2:	80 91 6b 00 	lds	r24, 0x006B
    23e6:	8f 5f       	subi	r24, 0xFF	; 255
    23e8:	80 93 6b 00 	sts	0x006B, r24
		}
		if (min_tenth == 6)
    23ec:	80 91 6b 00 	lds	r24, 0x006B
    23f0:	86 30       	cpi	r24, 0x06	; 6
    23f2:	59 f4       	brne	.+22     	; 0x240a <Stop_Watch_Mode+0x84>
		{
			min_tenth = min_units = 0;
    23f4:	10 92 6a 00 	sts	0x006A, r1
    23f8:	80 91 6a 00 	lds	r24, 0x006A
    23fc:	80 93 6b 00 	sts	0x006B, r24
			++hrs_units;
    2400:	80 91 6c 00 	lds	r24, 0x006C
    2404:	8f 5f       	subi	r24, 0xFF	; 255
    2406:	80 93 6c 00 	sts	0x006C, r24
		}

		/* Hours */
		if (hrs_units == 10)
    240a:	80 91 6c 00 	lds	r24, 0x006C
    240e:	8a 30       	cpi	r24, 0x0A	; 10
    2410:	39 f4       	brne	.+14     	; 0x2420 <Stop_Watch_Mode+0x9a>
		{
			hrs_units=0;
    2412:	10 92 6c 00 	sts	0x006C, r1
			++hrs_tenth;
    2416:	80 91 6d 00 	lds	r24, 0x006D
    241a:	8f 5f       	subi	r24, 0xFF	; 255
    241c:	80 93 6d 00 	sts	0x006D, r24
		}
		if (hrs_tenth == 10)
    2420:	80 91 6d 00 	lds	r24, 0x006D
    2424:	8a 30       	cpi	r24, 0x0A	; 10
    2426:	b1 f4       	brne	.+44     	; 0x2454 <Stop_Watch_Mode+0xce>
		{
			hrs_tenth = hrs_units = min_tenth = min_units = sec_tenth = sec_units = 0;
    2428:	10 92 68 00 	sts	0x0068, r1
    242c:	80 91 68 00 	lds	r24, 0x0068
    2430:	80 93 69 00 	sts	0x0069, r24
    2434:	80 91 69 00 	lds	r24, 0x0069
    2438:	80 93 6a 00 	sts	0x006A, r24
    243c:	80 91 6a 00 	lds	r24, 0x006A
    2440:	80 93 6b 00 	sts	0x006B, r24
    2444:	80 91 6b 00 	lds	r24, 0x006B
    2448:	80 93 6c 00 	sts	0x006C, r24
    244c:	80 91 6c 00 	lds	r24, 0x006C
    2450:	80 93 6d 00 	sts	0x006D, r24

/***************************************** Stop Watch Mode *****************************************/

void Stop_Watch_Mode (void)
{
	while ( !(PIND & (1<<Mode_Selector)))			// If Timer mode selected ( Pin is HIGH )
    2454:	e0 e3       	ldi	r30, 0x30	; 48
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	88 23       	and	r24, r24
    245c:	0c f0       	brlt	.+2      	; 0x2460 <Stop_Watch_Mode+0xda>
    245e:	98 cf       	rjmp	.-208    	; 0x2390 <Stop_Watch_Mode+0xa>
		if (hrs_tenth == 10)
		{
			hrs_tenth = hrs_units = min_tenth = min_units = sec_tenth = sec_units = 0;
		}
	}
}
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <Timer_Mode>:
/***************************************** Timer Mode *****************************************/

void Timer_Mode()
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	2e 97       	sbiw	r28, 0x0e	; 14
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	bc c1       	rjmp	.+888    	; 0x27f4 <Timer_Mode+0x38e>


	while ( PIND & (1<<Mode_Selector))			// If Timer mode selected ( Pin is HIGH )
	{
		display();
    247c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>

		if (0 == hrs_tenth && 0 == hrs_units && 0 == min_tenth && 0 == min_units && 0 == sec_tenth && 0 == sec_units)
    2480:	80 91 6d 00 	lds	r24, 0x006D
    2484:	88 23       	and	r24, r24
    2486:	71 f5       	brne	.+92     	; 0x24e4 <Timer_Mode+0x7e>
    2488:	80 91 6c 00 	lds	r24, 0x006C
    248c:	88 23       	and	r24, r24
    248e:	51 f5       	brne	.+84     	; 0x24e4 <Timer_Mode+0x7e>
    2490:	80 91 6b 00 	lds	r24, 0x006B
    2494:	88 23       	and	r24, r24
    2496:	31 f5       	brne	.+76     	; 0x24e4 <Timer_Mode+0x7e>
    2498:	80 91 6a 00 	lds	r24, 0x006A
    249c:	88 23       	and	r24, r24
    249e:	11 f5       	brne	.+68     	; 0x24e4 <Timer_Mode+0x7e>
    24a0:	80 91 69 00 	lds	r24, 0x0069
    24a4:	88 23       	and	r24, r24
    24a6:	f1 f4       	brne	.+60     	; 0x24e4 <Timer_Mode+0x7e>
    24a8:	80 91 68 00 	lds	r24, 0x0068
    24ac:	88 23       	and	r24, r24
    24ae:	d1 f4       	brne	.+52     	; 0x24e4 <Timer_Mode+0x7e>
		{
			hrs_tenth = hrs_units = min_tenth = min_units = sec_tenth = sec_units = 0;
    24b0:	10 92 68 00 	sts	0x0068, r1
    24b4:	80 91 68 00 	lds	r24, 0x0068
    24b8:	80 93 69 00 	sts	0x0069, r24
    24bc:	80 91 69 00 	lds	r24, 0x0069
    24c0:	80 93 6a 00 	sts	0x006A, r24
    24c4:	80 91 6a 00 	lds	r24, 0x006A
    24c8:	80 93 6b 00 	sts	0x006B, r24
    24cc:	80 91 6b 00 	lds	r24, 0x006B
    24d0:	80 93 6c 00 	sts	0x006C, r24
    24d4:	80 91 6c 00 	lds	r24, 0x006C
    24d8:	80 93 6d 00 	sts	0x006D, r24
			TCCR1B = 0;
    24dc:	ee e4       	ldi	r30, 0x4E	; 78
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	10 82       	st	Z, r1
    24e2:	f0 c0       	rjmp	.+480    	; 0x26c4 <Timer_Mode+0x25e>
		}

		else
		{
			if (sec_units == 255 && sec_tenth == 0 && min_units == 0 && min_tenth == 0 && hrs_units != 0 && hrs_tenth != 0)
    24e4:	80 91 68 00 	lds	r24, 0x0068
    24e8:	8f 3f       	cpi	r24, 0xFF	; 255
    24ea:	31 f5       	brne	.+76     	; 0x2538 <Timer_Mode+0xd2>
    24ec:	80 91 69 00 	lds	r24, 0x0069
    24f0:	88 23       	and	r24, r24
    24f2:	11 f5       	brne	.+68     	; 0x2538 <Timer_Mode+0xd2>
    24f4:	80 91 6a 00 	lds	r24, 0x006A
    24f8:	88 23       	and	r24, r24
    24fa:	f1 f4       	brne	.+60     	; 0x2538 <Timer_Mode+0xd2>
    24fc:	80 91 6b 00 	lds	r24, 0x006B
    2500:	88 23       	and	r24, r24
    2502:	d1 f4       	brne	.+52     	; 0x2538 <Timer_Mode+0xd2>
    2504:	80 91 6c 00 	lds	r24, 0x006C
    2508:	88 23       	and	r24, r24
    250a:	b1 f0       	breq	.+44     	; 0x2538 <Timer_Mode+0xd2>
    250c:	80 91 6d 00 	lds	r24, 0x006D
    2510:	88 23       	and	r24, r24
    2512:	91 f0       	breq	.+36     	; 0x2538 <Timer_Mode+0xd2>
			{
				--hrs_units;
    2514:	80 91 6c 00 	lds	r24, 0x006C
    2518:	81 50       	subi	r24, 0x01	; 1
    251a:	80 93 6c 00 	sts	0x006C, r24
				sec_units = 9;	sec_tenth = 5; min_units = 9; min_tenth = 5;
    251e:	89 e0       	ldi	r24, 0x09	; 9
    2520:	80 93 68 00 	sts	0x0068, r24
    2524:	85 e0       	ldi	r24, 0x05	; 5
    2526:	80 93 69 00 	sts	0x0069, r24
    252a:	89 e0       	ldi	r24, 0x09	; 9
    252c:	80 93 6a 00 	sts	0x006A, r24
    2530:	85 e0       	ldi	r24, 0x05	; 5
    2532:	80 93 6b 00 	sts	0x006B, r24
    2536:	c6 c0       	rjmp	.+396    	; 0x26c4 <Timer_Mode+0x25e>
			}

			else if (sec_units == 255 && sec_tenth == 0 && min_units == 0 && min_tenth == 0 && hrs_units == 0 && hrs_tenth != 0)
    2538:	80 91 68 00 	lds	r24, 0x0068
    253c:	8f 3f       	cpi	r24, 0xFF	; 255
    253e:	49 f5       	brne	.+82     	; 0x2592 <Timer_Mode+0x12c>
    2540:	80 91 69 00 	lds	r24, 0x0069
    2544:	88 23       	and	r24, r24
    2546:	29 f5       	brne	.+74     	; 0x2592 <Timer_Mode+0x12c>
    2548:	80 91 6a 00 	lds	r24, 0x006A
    254c:	88 23       	and	r24, r24
    254e:	09 f5       	brne	.+66     	; 0x2592 <Timer_Mode+0x12c>
    2550:	80 91 6b 00 	lds	r24, 0x006B
    2554:	88 23       	and	r24, r24
    2556:	e9 f4       	brne	.+58     	; 0x2592 <Timer_Mode+0x12c>
    2558:	80 91 6c 00 	lds	r24, 0x006C
    255c:	88 23       	and	r24, r24
    255e:	c9 f4       	brne	.+50     	; 0x2592 <Timer_Mode+0x12c>
    2560:	80 91 6d 00 	lds	r24, 0x006D
    2564:	88 23       	and	r24, r24
    2566:	a9 f0       	breq	.+42     	; 0x2592 <Timer_Mode+0x12c>
			{
				--hrs_tenth;
    2568:	80 91 6d 00 	lds	r24, 0x006D
    256c:	81 50       	subi	r24, 0x01	; 1
    256e:	80 93 6d 00 	sts	0x006D, r24
				sec_units = 9;	sec_tenth = 5; min_units = 9; min_tenth = 5; hrs_units = 9;
    2572:	89 e0       	ldi	r24, 0x09	; 9
    2574:	80 93 68 00 	sts	0x0068, r24
    2578:	85 e0       	ldi	r24, 0x05	; 5
    257a:	80 93 69 00 	sts	0x0069, r24
    257e:	89 e0       	ldi	r24, 0x09	; 9
    2580:	80 93 6a 00 	sts	0x006A, r24
    2584:	85 e0       	ldi	r24, 0x05	; 5
    2586:	80 93 6b 00 	sts	0x006B, r24
    258a:	89 e0       	ldi	r24, 0x09	; 9
    258c:	80 93 6c 00 	sts	0x006C, r24
    2590:	99 c0       	rjmp	.+306    	; 0x26c4 <Timer_Mode+0x25e>
			}

			else if (sec_units == 255 && sec_tenth == 0 && min_units == 0 && min_tenth == 0 && hrs_units != 0 && hrs_tenth == 0)
    2592:	80 91 68 00 	lds	r24, 0x0068
    2596:	8f 3f       	cpi	r24, 0xFF	; 255
    2598:	31 f5       	brne	.+76     	; 0x25e6 <Timer_Mode+0x180>
    259a:	80 91 69 00 	lds	r24, 0x0069
    259e:	88 23       	and	r24, r24
    25a0:	11 f5       	brne	.+68     	; 0x25e6 <Timer_Mode+0x180>
    25a2:	80 91 6a 00 	lds	r24, 0x006A
    25a6:	88 23       	and	r24, r24
    25a8:	f1 f4       	brne	.+60     	; 0x25e6 <Timer_Mode+0x180>
    25aa:	80 91 6b 00 	lds	r24, 0x006B
    25ae:	88 23       	and	r24, r24
    25b0:	d1 f4       	brne	.+52     	; 0x25e6 <Timer_Mode+0x180>
    25b2:	80 91 6c 00 	lds	r24, 0x006C
    25b6:	88 23       	and	r24, r24
    25b8:	b1 f0       	breq	.+44     	; 0x25e6 <Timer_Mode+0x180>
    25ba:	80 91 6d 00 	lds	r24, 0x006D
    25be:	88 23       	and	r24, r24
    25c0:	91 f4       	brne	.+36     	; 0x25e6 <Timer_Mode+0x180>
			{
				--hrs_units;
    25c2:	80 91 6c 00 	lds	r24, 0x006C
    25c6:	81 50       	subi	r24, 0x01	; 1
    25c8:	80 93 6c 00 	sts	0x006C, r24
				sec_units = 9;	sec_tenth = 5; min_units = 9; min_tenth = 5;
    25cc:	89 e0       	ldi	r24, 0x09	; 9
    25ce:	80 93 68 00 	sts	0x0068, r24
    25d2:	85 e0       	ldi	r24, 0x05	; 5
    25d4:	80 93 69 00 	sts	0x0069, r24
    25d8:	89 e0       	ldi	r24, 0x09	; 9
    25da:	80 93 6a 00 	sts	0x006A, r24
    25de:	85 e0       	ldi	r24, 0x05	; 5
    25e0:	80 93 6b 00 	sts	0x006B, r24
    25e4:	6f c0       	rjmp	.+222    	; 0x26c4 <Timer_Mode+0x25e>
			}

			else if (sec_units == 255 && sec_tenth == 0 && min_units != 0 && min_tenth != 0)
    25e6:	80 91 68 00 	lds	r24, 0x0068
    25ea:	8f 3f       	cpi	r24, 0xFF	; 255
    25ec:	c1 f4       	brne	.+48     	; 0x261e <Timer_Mode+0x1b8>
    25ee:	80 91 69 00 	lds	r24, 0x0069
    25f2:	88 23       	and	r24, r24
    25f4:	a1 f4       	brne	.+40     	; 0x261e <Timer_Mode+0x1b8>
    25f6:	80 91 6a 00 	lds	r24, 0x006A
    25fa:	88 23       	and	r24, r24
    25fc:	81 f0       	breq	.+32     	; 0x261e <Timer_Mode+0x1b8>
    25fe:	80 91 6b 00 	lds	r24, 0x006B
    2602:	88 23       	and	r24, r24
    2604:	61 f0       	breq	.+24     	; 0x261e <Timer_Mode+0x1b8>
			{
				--min_units;
    2606:	80 91 6a 00 	lds	r24, 0x006A
    260a:	81 50       	subi	r24, 0x01	; 1
    260c:	80 93 6a 00 	sts	0x006A, r24
				sec_units = 9;	sec_tenth = 5;
    2610:	89 e0       	ldi	r24, 0x09	; 9
    2612:	80 93 68 00 	sts	0x0068, r24
    2616:	85 e0       	ldi	r24, 0x05	; 5
    2618:	80 93 69 00 	sts	0x0069, r24
    261c:	53 c0       	rjmp	.+166    	; 0x26c4 <Timer_Mode+0x25e>
			}
			else if (sec_units == 255 && sec_tenth == 0 && min_units == 0 && min_tenth != 0)
    261e:	80 91 68 00 	lds	r24, 0x0068
    2622:	8f 3f       	cpi	r24, 0xFF	; 255
    2624:	d9 f4       	brne	.+54     	; 0x265c <Timer_Mode+0x1f6>
    2626:	80 91 69 00 	lds	r24, 0x0069
    262a:	88 23       	and	r24, r24
    262c:	b9 f4       	brne	.+46     	; 0x265c <Timer_Mode+0x1f6>
    262e:	80 91 6a 00 	lds	r24, 0x006A
    2632:	88 23       	and	r24, r24
    2634:	99 f4       	brne	.+38     	; 0x265c <Timer_Mode+0x1f6>
    2636:	80 91 6b 00 	lds	r24, 0x006B
    263a:	88 23       	and	r24, r24
    263c:	79 f0       	breq	.+30     	; 0x265c <Timer_Mode+0x1f6>
			{
				--min_tenth;
    263e:	80 91 6b 00 	lds	r24, 0x006B
    2642:	81 50       	subi	r24, 0x01	; 1
    2644:	80 93 6b 00 	sts	0x006B, r24
				sec_units = 9;	sec_tenth = 5;	min_units = 9;
    2648:	89 e0       	ldi	r24, 0x09	; 9
    264a:	80 93 68 00 	sts	0x0068, r24
    264e:	85 e0       	ldi	r24, 0x05	; 5
    2650:	80 93 69 00 	sts	0x0069, r24
    2654:	89 e0       	ldi	r24, 0x09	; 9
    2656:	80 93 6a 00 	sts	0x006A, r24
    265a:	34 c0       	rjmp	.+104    	; 0x26c4 <Timer_Mode+0x25e>
			}

			else if (sec_units == 255 && sec_tenth == 0 && min_units != 0)
    265c:	80 91 68 00 	lds	r24, 0x0068
    2660:	8f 3f       	cpi	r24, 0xFF	; 255
    2662:	a1 f4       	brne	.+40     	; 0x268c <Timer_Mode+0x226>
    2664:	80 91 69 00 	lds	r24, 0x0069
    2668:	88 23       	and	r24, r24
    266a:	81 f4       	brne	.+32     	; 0x268c <Timer_Mode+0x226>
    266c:	80 91 6a 00 	lds	r24, 0x006A
    2670:	88 23       	and	r24, r24
    2672:	61 f0       	breq	.+24     	; 0x268c <Timer_Mode+0x226>
			{
				--min_units;
    2674:	80 91 6a 00 	lds	r24, 0x006A
    2678:	81 50       	subi	r24, 0x01	; 1
    267a:	80 93 6a 00 	sts	0x006A, r24
				sec_units = 9;	sec_tenth = 5;
    267e:	89 e0       	ldi	r24, 0x09	; 9
    2680:	80 93 68 00 	sts	0x0068, r24
    2684:	85 e0       	ldi	r24, 0x05	; 5
    2686:	80 93 69 00 	sts	0x0069, r24
    268a:	1c c0       	rjmp	.+56     	; 0x26c4 <Timer_Mode+0x25e>
			}
			else if (sec_units == 255 && sec_tenth == 0)
    268c:	80 91 68 00 	lds	r24, 0x0068
    2690:	8f 3f       	cpi	r24, 0xFF	; 255
    2692:	41 f4       	brne	.+16     	; 0x26a4 <Timer_Mode+0x23e>
    2694:	80 91 69 00 	lds	r24, 0x0069
    2698:	88 23       	and	r24, r24
    269a:	21 f4       	brne	.+8      	; 0x26a4 <Timer_Mode+0x23e>
			{
				sec_units = 9;
    269c:	89 e0       	ldi	r24, 0x09	; 9
    269e:	80 93 68 00 	sts	0x0068, r24
    26a2:	10 c0       	rjmp	.+32     	; 0x26c4 <Timer_Mode+0x25e>
			}
			else if (sec_units == 255 && sec_tenth != 0)
    26a4:	80 91 68 00 	lds	r24, 0x0068
    26a8:	8f 3f       	cpi	r24, 0xFF	; 255
    26aa:	61 f4       	brne	.+24     	; 0x26c4 <Timer_Mode+0x25e>
    26ac:	80 91 69 00 	lds	r24, 0x0069
    26b0:	88 23       	and	r24, r24
    26b2:	41 f0       	breq	.+16     	; 0x26c4 <Timer_Mode+0x25e>
			{
				--sec_tenth;
    26b4:	80 91 69 00 	lds	r24, 0x0069
    26b8:	81 50       	subi	r24, 0x01	; 1
    26ba:	80 93 69 00 	sts	0x0069, r24
				sec_units = 9;
    26be:	89 e0       	ldi	r24, 0x09	; 9
    26c0:	80 93 68 00 	sts	0x0068, r24
			}
		}

		if (PINB & (1<<Time_Selector))
    26c4:	e6 e3       	ldi	r30, 0x36	; 54
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	80 72       	andi	r24, 0x20	; 32
    26d0:	90 70       	andi	r25, 0x00	; 0
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <Timer_Mode+0x272>
    26d6:	8e c0       	rjmp	.+284    	; 0x27f4 <Timer_Mode+0x38e>
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	a0 e2       	ldi	r26, 0x20	; 32
    26de:	b2 e4       	ldi	r27, 0x42	; 66
    26e0:	8b 87       	std	Y+11, r24	; 0x0b
    26e2:	9c 87       	std	Y+12, r25	; 0x0c
    26e4:	ad 87       	std	Y+13, r26	; 0x0d
    26e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	4a e7       	ldi	r20, 0x7A	; 122
    26f6:	53 e4       	ldi	r21, 0x43	; 67
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	8f 83       	std	Y+7, r24	; 0x07
    2702:	98 87       	std	Y+8, r25	; 0x08
    2704:	a9 87       	std	Y+9, r26	; 0x09
    2706:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2708:	6f 81       	ldd	r22, Y+7	; 0x07
    270a:	78 85       	ldd	r23, Y+8	; 0x08
    270c:	89 85       	ldd	r24, Y+9	; 0x09
    270e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e8       	ldi	r20, 0x80	; 128
    2716:	5f e3       	ldi	r21, 0x3F	; 63
    2718:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    271c:	88 23       	and	r24, r24
    271e:	2c f4       	brge	.+10     	; 0x272a <Timer_Mode+0x2c4>
		__ticks = 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9e 83       	std	Y+6, r25	; 0x06
    2726:	8d 83       	std	Y+5, r24	; 0x05
    2728:	3f c0       	rjmp	.+126    	; 0x27a8 <Timer_Mode+0x342>
	else if (__tmp > 65535)
    272a:	6f 81       	ldd	r22, Y+7	; 0x07
    272c:	78 85       	ldd	r23, Y+8	; 0x08
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	3f ef       	ldi	r19, 0xFF	; 255
    2736:	4f e7       	ldi	r20, 0x7F	; 127
    2738:	57 e4       	ldi	r21, 0x47	; 71
    273a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    273e:	18 16       	cp	r1, r24
    2740:	4c f5       	brge	.+82     	; 0x2794 <Timer_Mode+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2742:	6b 85       	ldd	r22, Y+11	; 0x0b
    2744:	7c 85       	ldd	r23, Y+12	; 0x0c
    2746:	8d 85       	ldd	r24, Y+13	; 0x0d
    2748:	9e 85       	ldd	r25, Y+14	; 0x0e
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e2       	ldi	r20, 0x20	; 32
    2750:	51 e4       	ldi	r21, 0x41	; 65
    2752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9e 83       	std	Y+6, r25	; 0x06
    2768:	8d 83       	std	Y+5, r24	; 0x05
    276a:	0f c0       	rjmp	.+30     	; 0x278a <Timer_Mode+0x324>
    276c:	89 e1       	ldi	r24, 0x19	; 25
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	9c 83       	std	Y+4, r25	; 0x04
    2772:	8b 83       	std	Y+3, r24	; 0x03
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	9c 81       	ldd	r25, Y+4	; 0x04
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <Timer_Mode+0x312>
    277c:	9c 83       	std	Y+4, r25	; 0x04
    277e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	69 f7       	brne	.-38     	; 0x276c <Timer_Mode+0x306>
    2792:	14 c0       	rjmp	.+40     	; 0x27bc <Timer_Mode+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2794:	6f 81       	ldd	r22, Y+7	; 0x07
    2796:	78 85       	ldd	r23, Y+8	; 0x08
    2798:	89 85       	ldd	r24, Y+9	; 0x09
    279a:	9a 85       	ldd	r25, Y+10	; 0x0a
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	9a 83       	std	Y+2, r25	; 0x02
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <Timer_Mode+0x34e>
    27b8:	9a 83       	std	Y+2, r25	; 0x02
    27ba:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(40);
			if (PINB & (1<<Time_Selector))
    27bc:	e6 e3       	ldi	r30, 0x36	; 54
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	88 2f       	mov	r24, r24
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	80 72       	andi	r24, 0x20	; 32
    27c8:	90 70       	andi	r25, 0x00	; 0
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	99 f0       	breq	.+38     	; 0x27f4 <Timer_Mode+0x38e>
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <Timer_Mode+0x36e>
			{
				while (PINB & (1<<Time_Selector)) {display();}
    27d0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <display>
    27d4:	e6 e3       	ldi	r30, 0x36	; 54
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	88 2f       	mov	r24, r24
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	80 72       	andi	r24, 0x20	; 32
    27e0:	90 70       	andi	r25, 0x00	; 0
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	a9 f7       	brne	.-22     	; 0x27d0 <Timer_Mode+0x36a>
				++selector;
    27e6:	80 91 6e 00 	lds	r24, 0x006E
    27ea:	8f 5f       	subi	r24, 0xFF	; 255
    27ec:	80 93 6e 00 	sts	0x006E, r24
				Mode_Selection_Trial();
    27f0:	0e 94 50 07 	call	0xea0	; 0xea0 <Mode_Selection_Trial>

void Timer_Mode()
{


	while ( PIND & (1<<Mode_Selector))			// If Timer mode selected ( Pin is HIGH )
    27f4:	e0 e3       	ldi	r30, 0x30	; 48
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	88 23       	and	r24, r24
    27fc:	0c f4       	brge	.+2      	; 0x2800 <Timer_Mode+0x39a>
    27fe:	3e ce       	rjmp	.-900    	; 0x247c <Timer_Mode+0x16>
				++selector;
				Mode_Selection_Trial();
			}
		}
	}
}
    2800:	2e 96       	adiw	r28, 0x0e	; 14
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <main>:

int main(void)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
	DDRC |= 0x0F;					// First four pins of PORTC are output ( for 7447 )
    281a:	a4 e3       	ldi	r26, 0x34	; 52
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e4 e3       	ldi	r30, 0x34	; 52
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	8f 60       	ori	r24, 0x0F	; 15
    2826:	8c 93       	st	X, r24
	DDRA |= 0x3F;					// First six pins of PORTA are output ( Refresh all 7 segments )
    2828:	aa e3       	ldi	r26, 0x3A	; 58
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	ea e3       	ldi	r30, 0x3A	; 58
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	8f 63       	ori	r24, 0x3F	; 63
    2834:	8c 93       	st	X, r24
	PORTC &= 0xF0;					//	All 7-Segments are initialized to 0
    2836:	a5 e3       	ldi	r26, 0x35	; 53
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	e5 e3       	ldi	r30, 0x35	; 53
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	80 7f       	andi	r24, 0xF0	; 240
    2842:	8c 93       	st	X, r24

	DDRD &= ~(1<<Mode_Selector); 	// Timer / Stop Watch Selector ( Button = 0 >> Stop Watch , Button = 1 >> Timer )
    2844:	a1 e3       	ldi	r26, 0x31	; 49
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e1 e3       	ldi	r30, 0x31	; 49
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	8f 77       	andi	r24, 0x7F	; 127
    2850:	8c 93       	st	X, r24
	DDRD |= (1<<Timer_LED); 		// LED to indicate time is finished ( Timer Mode )
    2852:	a1 e3       	ldi	r26, 0x31	; 49
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e1 e3       	ldi	r30, 0x31	; 49
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	80 64       	ori	r24, 0x40	; 64
    285e:	8c 93       	st	X, r24

	DDRB  &= ~(1<<Time_Selector) & ~(1<<Timer_Inc) & ~(1<<Timer_Dec);			// 3 Buttons for Timer Mode
    2860:	a7 e3       	ldi	r26, 0x37	; 55
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e7 e3       	ldi	r30, 0x37	; 55
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	8f 71       	andi	r24, 0x1F	; 31
    286c:	8c 93       	st	X, r24
	DDRB  |= (1<<Seconds_LED) | (1<<Minutes_LED) | (1<<Hours_LED);				// 3 LED for Time Selection
    286e:	a7 e3       	ldi	r26, 0x37	; 55
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e7 e3       	ldi	r30, 0x37	; 55
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	8b 60       	ori	r24, 0x0B	; 11
    287a:	8c 93       	st	X, r24
	PORTB &= ~(1<<Seconds_LED) & ~(1<<Minutes_LED) & ~(1<<Hours_LED);			// 3 LEDs Initially OFF
    287c:	a8 e3       	ldi	r26, 0x38	; 56
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e8 e3       	ldi	r30, 0x38	; 56
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	84 7f       	andi	r24, 0xF4	; 244
    2888:	8c 93       	st	X, r24
	/******************************************* Initializations *******************************************/

	sei();							// Set Global interrupt on
    288a:	78 94       	sei
	Timer1_Init();
    288c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Timer1_Init>
	Ext_INT0_Reset();				// Reset Button Interrupt
    2890:	0e 94 6f 06 	call	0xcde	; 0xcde <Ext_INT0_Reset>
	Ext_INT1_Pause();				// Pause Button Interrupt
    2894:	0e 94 92 06 	call	0xd24	; 0xd24 <Ext_INT1_Pause>
	Ext_INT2_Resume();				// Resume Button Interrupt
    2898:	0e 94 ae 06 	call	0xd5c	; 0xd5c <Ext_INT2_Resume>
	for(;;)
	{

		/***************************************** Stop Watch Mode *****************************************/

		if (!(PIND & (1<<Mode_Selector)))				// If Stop Watch mode selected ( Pin is LOW )
    289c:	e0 e3       	ldi	r30, 0x30	; 48
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	88 23       	and	r24, r24
    28a4:	1c f0       	brlt	.+6      	; 0x28ac <main+0x9a>
		{
			Stop_Watch_Mode();
    28a6:	0e 94 c3 11 	call	0x2386	; 0x2386 <Stop_Watch_Mode>
    28aa:	f8 cf       	rjmp	.-16     	; 0x289c <main+0x8a>

		/***************************************** Timer Mode *****************************************/

		else											// If Timer mode Selected ( Pin is High )
		{
			TCCR1B = 0;									// Timer Off until Start button is pressed
    28ac:	ee e4       	ldi	r30, 0x4E	; 78
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	10 82       	st	Z, r1
			Timer_Mode();
    28b2:	0e 94 33 12 	call	0x2466	; 0x2466 <Timer_Mode>
    28b6:	f2 cf       	rjmp	.-28     	; 0x289c <main+0x8a>

000028b8 <__prologue_saves__>:
    28b8:	2f 92       	push	r2
    28ba:	3f 92       	push	r3
    28bc:	4f 92       	push	r4
    28be:	5f 92       	push	r5
    28c0:	6f 92       	push	r6
    28c2:	7f 92       	push	r7
    28c4:	8f 92       	push	r8
    28c6:	9f 92       	push	r9
    28c8:	af 92       	push	r10
    28ca:	bf 92       	push	r11
    28cc:	cf 92       	push	r12
    28ce:	df 92       	push	r13
    28d0:	ef 92       	push	r14
    28d2:	ff 92       	push	r15
    28d4:	0f 93       	push	r16
    28d6:	1f 93       	push	r17
    28d8:	cf 93       	push	r28
    28da:	df 93       	push	r29
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	ca 1b       	sub	r28, r26
    28e2:	db 0b       	sbc	r29, r27
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	09 94       	ijmp

000028f0 <__epilogue_restores__>:
    28f0:	2a 88       	ldd	r2, Y+18	; 0x12
    28f2:	39 88       	ldd	r3, Y+17	; 0x11
    28f4:	48 88       	ldd	r4, Y+16	; 0x10
    28f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    28f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    28fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    28fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    28fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2900:	aa 84       	ldd	r10, Y+10	; 0x0a
    2902:	b9 84       	ldd	r11, Y+9	; 0x09
    2904:	c8 84       	ldd	r12, Y+8	; 0x08
    2906:	df 80       	ldd	r13, Y+7	; 0x07
    2908:	ee 80       	ldd	r14, Y+6	; 0x06
    290a:	fd 80       	ldd	r15, Y+5	; 0x05
    290c:	0c 81       	ldd	r16, Y+4	; 0x04
    290e:	1b 81       	ldd	r17, Y+3	; 0x03
    2910:	aa 81       	ldd	r26, Y+2	; 0x02
    2912:	b9 81       	ldd	r27, Y+1	; 0x01
    2914:	ce 0f       	add	r28, r30
    2916:	d1 1d       	adc	r29, r1
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	ed 01       	movw	r28, r26
    2924:	08 95       	ret

00002926 <_exit>:
    2926:	f8 94       	cli

00002928 <__stop_program>:
    2928:	ff cf       	rjmp	.-2      	; 0x2928 <__stop_program>
